{"version":3,"file":"component---src-pages-index-jsx-f620e7852227efbc6a2e.js","mappings":"mLAEIA,EAAmBC,GAA6B,aAAjBA,EAAQC,KAEvCC,EAAgBC,GAAUA,aAAiBC,KAE3CC,EAAqBF,GAAmB,MAATA,EAEnC,MAAMG,EAAgBH,GAA2B,iBAAVA,EACvC,IAAII,EAAYJ,IAAWE,EAAkBF,KACxCK,MAAMC,QAAQN,IACfG,EAAaH,KACZD,EAAaC,GAEdO,EAAiBC,GAAUJ,EAASI,IAAUA,EAAMC,OAClDb,EAAgBY,EAAMC,QAClBD,EAAMC,OAAOC,QACbF,EAAMC,OAAOT,MACjBQ,EAIFG,EAAqB,CAACC,EAAOC,IAASD,EAAME,IAFxB,CAACD,GAASA,EAAKE,UAAU,EAAGF,EAAKG,OAAO,iBAAmBH,EAE/BI,CAAkBJ,IAElEK,EAAWlB,GAAUK,MAAMC,QAAQN,GAASA,EAAMmB,OAAOC,SAAW,GAEpEC,EAAeC,QAAgBC,IAARD,EAEvBE,EAAM,CAACC,EAAKC,EAAMC,KAClB,IAAKD,IAAStB,EAASqB,GACnB,OAAOE,EAEX,MAAMC,EAASV,EAAQQ,EAAKG,MAAM,cAAcC,QAAO,CAACF,EAAQG,IAAQ7B,EAAkB0B,GAAUA,EAASA,EAAOG,IAAMN,GAC1H,OAAOJ,EAAYO,IAAWA,IAAWH,EACnCJ,EAAYI,EAAIC,IACZC,EACAF,EAAIC,GACRE,CAAM,EAGhB,MAAMI,EACI,OADJA,EAES,WAGTC,EACM,SADNA,EAEQ,WAFRA,EAGQ,WAHRA,EAIS,YAJTA,EAKG,MAEHC,EACG,MADHA,EAEG,MAFHA,EAGS,YAHTA,EAIS,YAJTA,EAKO,UALPA,EAMQ,WANRA,EAOQ,WAGU,gBAAoB,MAmE5C,IAAIC,EAAoB,CAACC,EAAWC,EAAiBC,EAAqBC,GAAS,KAC/E,MAAMX,EAAS,CAAC,EAChB,IAAK,MAAMG,KAAOK,EACdI,OAAOC,eAAeb,EAAQG,EAAK,CAC/BP,IAAK,KACD,MAAMkB,EAAOX,EAKb,OAJIM,EAAgBK,KAAUT,IAC1BI,EAAgBK,IAASH,GAAUN,GAEvCK,IAAwBA,EAAoBI,IAAQ,GAC7CN,EAAUM,EAAK,IAIlC,OAAOd,CAAM,EAGbe,EAAiB3C,GAAUI,EAASJ,KAAWwC,OAAOI,KAAK5C,GAAO6C,OAElEC,EAAwB,CAACC,EAAeV,EAAiBE,KACzD,MAAM,KAAE1B,KAASuB,GAAcW,EAC/B,OAAQJ,EAAcP,IAClBI,OAAOI,KAAKR,GAAWS,QAAUL,OAAOI,KAAKP,GAAiBQ,QAC9DL,OAAOI,KAAKR,GAAWY,MAAMjB,GAAQM,EAAgBN,OAC/CQ,GAAUN,IAAsB,EAG1CgB,EAAyBjD,GAAWK,MAAMC,QAAQN,GAASA,EAAQ,CAACA,GAWxE,SAASkD,EAAaC,GAClB,MAAMC,EAAS,SAAaD,GAC5BC,EAAOC,QAAUF,EACjB,aAAgB,KACZ,MAKMG,GAAgBH,EAAMI,UACxBH,EAAOC,QAAQG,QAAQC,UAAU,CAC7BC,KAAMN,EAAOC,QAAQM,WAE7B,MAAO,IATU,CAACL,IACVA,GACAA,EAAaM,aACjB,EAMSC,CAASP,EAAa,GACpC,CAACH,EAAMI,UACd,CAoEA,IAAIO,EAAY9D,GAA2B,iBAAVA,EAE7B+D,EAAsB,CAACnD,EAAOoD,EAAQC,EAAYC,KAClD,MAAM5D,EAAUD,MAAMC,QAAQM,GAC9B,OAAIkD,EAASlD,IACTsD,GAAYF,EAAOG,MAAMC,IAAIxD,GACtBY,EAAIyC,EAAYrD,IAEvBN,EACOM,EAAMyD,KAAKC,IAAeJ,GAAYF,EAAOG,MAAMC,IAAIE,GAC1D9C,EAAIyC,EAAYK,OAExBJ,IAAaF,EAAOO,UAAW,GACxBN,EAAU,EAGjBO,EAAcxE,GAA2B,mBAAVA,EAE/ByE,EAAqBC,IACrB,IAAK,MAAM3C,KAAO2C,EACd,GAAIF,EAAWE,EAAK3C,IAChB,OAAO,EAGf,OAAO,CAAK,EA8MhB,IAAI4C,EAAe,CAAC9D,EAAM+D,EAA0BC,EAAQ/E,EAAMgF,IAAYF,EACxE,IACKC,EAAOhE,GACVkE,MAAO,IACCF,EAAOhE,IAASgE,EAAOhE,GAAMkE,MAAQF,EAAOhE,GAAMkE,MAAQ,CAAC,EAC/D,CAACjF,GAAOgF,IAAW,IAGzB,CAAC,EAEHE,EAAShF,GAAU,QAAQiF,KAAKjF,GAEhCkF,EAAgBC,GAAUjE,EAAQiE,EAAMC,QAAQ,YAAa,IAAIvD,MAAM,UAE3E,SAASwD,EAAIC,EAAQ5D,EAAM1B,GACvB,IAAIuF,GAAS,EACb,MAAMC,EAAWR,EAAMtD,GAAQ,CAACA,GAAQwD,EAAaxD,GAC/CmB,EAAS2C,EAAS3C,OAClB4C,EAAY5C,EAAS,EAC3B,OAAS0C,EAAQ1C,GAAQ,CACrB,MAAMd,EAAMyD,EAASD,GACrB,IAAIG,EAAW1F,EACf,GAAIuF,IAAUE,EAAW,CACrB,MAAME,EAAWL,EAAOvD,GACxB2D,EACItF,EAASuF,IAAatF,MAAMC,QAAQqF,GAC9BA,EACCC,OAAOJ,EAASD,EAAQ,IAErB,CAAC,EADD,EAElB,CACAD,EAAOvD,GAAO2D,EACdJ,EAASA,EAAOvD,EACpB,CACA,OAAOuD,CACX,CAEA,MAAMO,EAAe,CAACC,EAAQnC,EAAUoC,KACpC,IAAK,MAAMhE,KAAOgE,GAAevD,OAAOI,KAAKkD,GAAS,CAClD,MAAME,EAAQxE,EAAIsE,EAAQ/D,GAC1B,GAAIiE,EAAO,CACP,MAAM,GAAEC,KAAOC,GAAiBF,EAChC,GAAIC,GAAMtC,EAASsC,EAAGpF,MAAO,CACzB,GAAIoF,EAAGE,IAAIC,OAAS/E,EAAY4E,EAAGE,IAAIC,SACnC,MAEC,GAAIH,EAAGI,KAAM,CACdJ,EAAGI,KAAK,GAAGD,QACX,KACJ,CACJ,MACShG,EAAS8F,IACdL,EAAaK,EAAcvC,EAEnC,CACJ,GAGJ,IAaI2C,EAAY,CAACzF,EAAMmD,EAAQuC,KAAiBA,IAC3CvC,EAAOO,UACJP,EAAOG,MAAMrD,IAAID,IACjB,IAAImD,EAAOG,OAAOqC,MAAMC,GAAc5F,EAAK6F,WAAWD,IAClD,SAASxB,KAAKpE,EAAK8F,MAAMF,EAAU5D,YAE3C+D,EAA4B,CAAC/B,EAAQgC,EAAOhG,KAC5C,MAAMiG,EAAmB5F,EAAQM,EAAIqD,EAAQhE,IAG7C,OAFAwE,EAAIyB,EAAkB,OAAQD,EAAMhG,IACpCwE,EAAIR,EAAQhE,EAAMiG,GACXjC,CAAM,EAGbkC,EAAa/G,GAA2B,kBAAVA,EAE9BgH,EAAenH,GAA6B,SAAjBA,EAAQC,KAEnCmH,EAAajH,GAAU8D,EAAS9D,IAAU,iBAAqBA,GAE/DkH,EAAgBrH,GAA6B,UAAjBA,EAAQC,KAEpCqH,EAAWnH,GAAUA,aAAiBoH,OAE1C,MAAMC,EAAgB,CAClBrH,OAAO,EACPsH,SAAS,GAEPC,EAAc,CAAEvH,OAAO,EAAMsH,SAAS,GAC5C,IAAIE,EAAoBC,IACpB,GAAIpH,MAAMC,QAAQmH,GAAU,CACxB,GAAIA,EAAQ5E,OAAS,EAAG,CACpB,MAAM6E,EAASD,EACVtG,QAAQwG,GAAWA,GAAUA,EAAOjH,UAAYiH,EAAOpE,WACvDc,KAAKsD,GAAWA,EAAO3H,QAC5B,MAAO,CAAEA,MAAO0H,EAAQJ,UAAWI,EAAO7E,OAC9C,CACA,OAAO4E,EAAQ,GAAG/G,UAAY+G,EAAQ,GAAGlE,SAEjCkE,EAAQ,GAAGG,aAAevG,EAAYoG,EAAQ,GAAGG,WAAW5H,OACtDqB,EAAYoG,EAAQ,GAAGzH,QAA+B,KAArByH,EAAQ,GAAGzH,MACxCuH,EACA,CAAEvH,MAAOyH,EAAQ,GAAGzH,MAAOsH,SAAS,GACxCC,EACRF,CACV,CACA,OAAOA,CAAa,EAGxB,MAAMQ,EAAgB,CAClBP,SAAS,EACTtH,MAAO,MAEX,IAAI8H,GAAiBL,GAAYpH,MAAMC,QAAQmH,GACzCA,EAAQ3F,QAAO,CAACiG,EAAUJ,IAAWA,GAAUA,EAAOjH,UAAYiH,EAAOpE,SACrE,CACE+D,SAAS,EACTtH,MAAO2H,EAAO3H,OAEhB+H,GAAUF,GACdA,EAEN,SAASG,GAAiBpG,EAAQuE,EAAKrG,EAAO,YAC1C,GAAImH,EAAUrF,IACTvB,MAAMC,QAAQsB,IAAWA,EAAOqG,MAAMhB,IACtCF,EAAUnF,KAAYA,EACvB,MAAO,CACH9B,OACAgF,QAASmC,EAAUrF,GAAUA,EAAS,GACtCuE,MAGZ,CAEA,IAAI+B,GAAsBC,GAAmB/H,EAAS+H,KAAoBhB,EAAQgB,GAC5EA,EACA,CACEnI,MAAOmI,EACPrD,QAAS,IAGbsD,GAAgBC,MAAOrC,EAAOsC,EAAY1D,EAA0B2D,EAA2BC,KAC/F,MAAM,IAAErC,EAAG,KAAEE,EAAI,SAAEoC,EAAQ,UAAEC,EAAS,UAAEC,EAAS,IAAEC,EAAG,IAAEC,EAAG,QAAEC,EAAO,SAAEC,EAAQ,KAAElI,EAAI,cAAEmI,EAAa,MAAEC,EAAK,SAAE1F,GAAcyC,EAAMC,GAChI,IAAKgD,GAAS1F,EACV,MAAO,CAAC,EAEZ,MAAM2F,EAAW7C,EAAOA,EAAK,GAAKF,EAC5BgD,EAAqBrE,IACnByD,GAA6BW,EAASE,iBACtCF,EAASC,kBAAkBpC,EAAUjC,GAAW,GAAKA,GAAW,KAChEoE,EAASE,iBACb,EAEEvC,EAAQ,CAAC,EACTwC,EAAUnC,EAAaf,GACvBmD,EAAa1J,EAAgBuG,GAC7BoD,EAAoBF,GAAWC,EAC/BE,GAAYR,GAAiBhC,EAAYb,MAAUA,EAAInG,OAC1C,KAAfsI,GACCjI,MAAMC,QAAQgI,KAAgBA,EAAWzF,OACxC4G,EAAoB9E,EAAa+E,KAAK,KAAM7I,EAAM+D,EAA0BiC,GAC5E8C,EAAmB,CAACC,EAAWC,EAAkBC,EAAkBC,EAAU7H,EAAkC8H,EAAU9H,KAC3H,MAAM4C,EAAU8E,EAAYC,EAAmBC,EAC/CjD,EAAMhG,GAAQ,CACVf,KAAM8J,EAAYG,EAAUC,EAC5BlF,UACAqB,SACGsD,EAAkBG,EAAYG,EAAUC,EAASlF,GACvD,EAEL,GAAI0D,GACGnI,MAAMC,QAAQgI,KAAgBA,EAAWzF,OAC1C4F,KACKc,IAAsBC,GAAWtJ,EAAkBoI,KACjDvB,EAAUuB,KAAgBA,GAC1BgB,IAAe9B,EAAiBnB,GAAMiB,SACtC+B,IAAYvB,GAAczB,GAAMiB,SAAW,CACpD,MAAM,MAAEtH,EAAK,QAAE8E,GAAYmC,EAAUwB,GAC/B,CAAEzI,QAASyI,EAAU3D,QAAS2D,GAC9BP,GAAmBO,GACzB,GAAIzI,IACA6G,EAAMhG,GAAQ,CACVf,KAAMoC,EACN4C,UACAqB,IAAK+C,KACFO,EAAkBvH,EAAiC4C,KAErDF,GAED,OADAuE,EAAkBrE,GACX+B,CAGnB,CACA,KAAK2C,GAAatJ,EAAkB0I,IAAS1I,EAAkB2I,IAAO,CAClE,IAAIe,EACAK,EACJ,MAAMC,EAAYhC,GAAmBW,GAC/BsB,EAAYjC,GAAmBU,GACrC,GAAK1I,EAAkBoI,IAAgB1C,MAAM0C,GASxC,CACD,MAAM8B,EAAYjE,EAAIkE,aAAe,IAAIpK,KAAKqI,GAC1CxE,EAASoG,EAAUlK,SACnB4J,EAAYQ,EAAY,IAAInK,KAAKiK,EAAUlK,QAE3C8D,EAASqG,EAAUnK,SACnBiK,EAAYG,EAAY,IAAInK,KAAKkK,EAAUnK,OAEnD,KAjB0D,CACtD,MAAMsK,EAAcnE,EAAI6C,gBAAkBV,EACrCpI,EAAkBgK,EAAUlK,SAC7B4J,EAAYU,EAAcJ,EAAUlK,OAEnCE,EAAkBiK,EAAUnK,SAC7BiK,EAAYK,EAAcH,EAAUnK,MAE5C,CAUA,IAAI4J,GAAaK,KACbN,IAAmBC,EAAWM,EAAUpF,QAASqF,EAAUrF,QAAS5C,EAA4BA,IAC3F0C,GAED,OADAuE,EAAkBtC,EAAMhG,GAAMiE,SACvB+B,CAGnB,CACA,IAAK6B,GAAaC,KACba,IACA1F,EAASwE,IAAgBE,GAAgBnI,MAAMC,QAAQgI,IAAe,CACvE,MAAMiC,EAAkBrC,GAAmBQ,GACrC8B,EAAkBtC,GAAmBS,GACrCiB,GAAa1J,EAAkBqK,EAAgBvK,QACjDsI,EAAWzF,OAAS0H,EAAgBvK,MAClCiK,GAAa/J,EAAkBsK,EAAgBxK,QACjDsI,EAAWzF,OAAS2H,EAAgBxK,MACxC,IAAI4J,GAAaK,KACbN,EAAiBC,EAAWW,EAAgBzF,QAAS0F,EAAgB1F,UAChEF,GAED,OADAuE,EAAkBtC,EAAMhG,GAAMiE,SACvB+B,CAGnB,CACA,GAAIiC,IAAYU,GAAW1F,EAASwE,GAAa,CAC7C,MAAQtI,MAAOyK,EAAY,QAAE3F,GAAYoD,GAAmBY,GAC5D,GAAI3B,EAAQsD,KAAkBnC,EAAWoC,MAAMD,KAC3C5D,EAAMhG,GAAQ,CACVf,KAAMoC,EACN4C,UACAqB,SACGsD,EAAkBvH,EAAgC4C,KAEpDF,GAED,OADAuE,EAAkBrE,GACX+B,CAGnB,CACA,GAAIkC,EACA,GAAIvE,EAAWuE,GAAW,CACtB,MACM4B,EAAgB3C,SADDe,EAAST,GACiBY,GAC/C,GAAIyB,IACA9D,EAAMhG,GAAQ,IACP8J,KACAlB,EAAkBvH,EAAiCyI,EAAc7F,WAEnEF,GAED,OADAuE,EAAkBwB,EAAc7F,SACzB+B,CAGnB,MACK,GAAIzG,EAAS2I,GAAW,CACzB,IAAI6B,EAAmB,CAAC,EACxB,IAAK,MAAM7I,KAAOgH,EAAU,CACxB,IAAKpG,EAAciI,KAAsBhG,EACrC,MAEJ,MAAM+F,EAAgB3C,SAAuBe,EAAShH,GAAKuG,GAAaY,EAAUnH,GAC9E4I,IACAC,EAAmB,IACZD,KACAlB,EAAkB1H,EAAK4I,EAAc7F,UAE5CqE,EAAkBwB,EAAc7F,SAC5BF,IACAiC,EAAMhG,GAAQ+J,GAG1B,CACA,IAAKjI,EAAciI,KACf/D,EAAMhG,GAAQ,CACVsF,IAAK+C,KACF0B,IAEFhG,GACD,OAAOiC,CAGnB,CAGJ,OADAsC,GAAkB,GACXtC,CAAK,EAOhB,IAAIgE,GAA0B,oBAAXC,aACe,IAAvBA,OAAOC,aACM,oBAAbC,SAEX,SAASC,GAAYvG,GACjB,IAAIwG,EACJ,MAAM5K,EAAUD,MAAMC,QAAQoE,GAC9B,GAAIA,aAAgBzE,KAChBiL,EAAO,IAAIjL,KAAKyE,QAEf,GAAIA,aAAgByG,IACrBD,EAAO,IAAIC,IAAIzG,OAEd,IAAMmG,KAAUnG,aAAgB0G,MAAQ1G,aAAgB2G,YACxD/K,IAAWF,EAASsE,GAWrB,OAAOA,EAVPwG,EAAO5K,EAAU,GAAK,CAAC,EACvB,IAAK,MAAMyB,KAAO2C,EAAM,CACpB,GAAIF,EAAWE,EAAK3C,IAAO,CACvBmJ,EAAOxG,EACP,KACJ,CACAwG,EAAKnJ,GAAOkJ,GAAYvG,EAAK3C,GACjC,CAIJ,CACA,OAAOmJ,CACX,CAEA,IAEII,GAAsBC,IAAS,CAC/BC,YAAaD,GAAQA,IAAStJ,EAC9BwJ,SAAUF,IAAStJ,EACnByJ,WAAYH,IAAStJ,EACrB0J,QAASJ,IAAStJ,EAClB2J,UAAWL,IAAStJ,IAmDxB,SAAS4J,GAAapK,GAClB,IAAK,MAAMM,KAAON,EACd,IAAKJ,EAAYI,EAAIM,IACjB,OAAO,EAGf,OAAO,CACX,CACA,SAAS+J,GAAMxG,EAAQ5D,GACnB,MAAMqK,EAAa/G,EAAMtD,GAAQ,CAACA,GAAQwD,EAAaxD,GACjDsK,EAAmC,GAArBD,EAAWlJ,OAAcyC,EAlBjD,SAAiBA,EAAQyG,GACrB,MAAMlJ,EAASkJ,EAAWpF,MAAM,GAAI,GAAG9D,OACvC,IAAI0C,EAAQ,EACZ,KAAOA,EAAQ1C,GACXyC,EAASjE,EAAYiE,GAAUC,IAAUD,EAAOyG,EAAWxG,MAE/D,OAAOD,CACX,CAW0D2G,CAAQ3G,EAAQyG,GAChEhK,EAAMgK,EAAWA,EAAWlJ,OAAS,GAC3C,IAAIqJ,EACAF,UACOA,EAAYjK,GAEvB,IAAK,IAAIoK,EAAI,EAAGA,EAAIJ,EAAWpF,MAAM,GAAI,GAAG9D,OAAQsJ,IAAK,CACrD,IACIC,EADA7G,GAAS,EAEb,MAAM8G,EAAeN,EAAWpF,MAAM,IAAKwF,EAAI,IACzCG,EAAqBD,EAAaxJ,OAAS,EAIjD,IAHIsJ,EAAI,IACJD,EAAiB5G,KAEZC,EAAQ8G,EAAaxJ,QAAQ,CAClC,MAAM0J,EAAOF,EAAa9G,GAC1B6G,EAAYA,EAAYA,EAAUG,GAAQjH,EAAOiH,GAC7CD,IAAuB/G,IACrBnF,EAASgM,IAAczJ,EAAcyJ,IAClC/L,MAAMC,QAAQ8L,IAAcP,GAAaO,MAC9CF,SAAwBA,EAAeK,UAAejH,EAAOiH,IAEjEL,EAAiBE,CACrB,CACJ,CACA,OAAO9G,CACX,CA2NA,SAASkH,KACL,IAAIC,EAAa,GAiBjB,MAAO,CACH,aAAIC,GACA,OAAOD,CACX,EACA/I,KApBU1D,IACV,IAAK,MAAM2M,KAAYF,EACnBE,EAASjJ,KAAK1D,EAClB,EAkBAyD,UAhBekJ,IACfF,EAAWG,KAAKD,GACT,CACH/I,YAAa,KACT6I,EAAaA,EAAWtL,QAAQ0L,GAAMA,IAAMF,GAAS,IAa7D/I,YATgB,KAChB6I,EAAa,EAAE,EAUvB,CAEA,IAAIK,GAAe9M,GAAUE,EAAkBF,KAAWG,EAAaH,GAEvE,SAAS+M,GAAUC,EAASC,GACxB,GAAIH,GAAYE,IAAYF,GAAYG,GACpC,OAAOD,IAAYC,EAEvB,GAAIlN,EAAaiN,IAAYjN,EAAakN,GACtC,OAAOD,EAAQE,YAAcD,EAAQC,UAEzC,MAAMC,EAAQ3K,OAAOI,KAAKoK,GACpBI,EAAQ5K,OAAOI,KAAKqK,GAC1B,GAAIE,EAAMtK,SAAWuK,EAAMvK,OACvB,OAAO,EAEX,IAAK,MAAMd,KAAOoL,EAAO,CACrB,MAAME,EAAOL,EAAQjL,GACrB,IAAKqL,EAAME,SAASvL,GAChB,OAAO,EAEX,GAAY,QAARA,EAAe,CACf,MAAMwL,EAAON,EAAQlL,GACrB,GAAKhC,EAAasN,IAAStN,EAAawN,IACnCnN,EAASiN,IAASjN,EAASmN,IAC3BlN,MAAMC,QAAQ+M,IAAShN,MAAMC,QAAQiN,IACnCR,GAAUM,EAAME,GACjBF,IAASE,EACX,OAAO,CAEf,CACJ,CACA,OAAO,CACX,CAEA,IAAIC,GAAiBxN,IACjB,MAAMyN,EAAQzN,EAAQA,EAAM0N,cAAgB,EAE5C,OAAO1N,aADcyN,GAASA,EAAME,YAAcF,EAAME,YAAY5C,YAAcA,YAC9C,EAGpC6C,GAAoB/N,GAA6B,oBAAjBA,EAAQC,KAIxC+N,GAAQ1H,GAAQqH,GAAcrH,IAAQA,EAAI2H,YAE9C,SAASC,GAAgBrJ,EAAMoB,EAAS,CAAC,GACrC,MAAMkI,EAAoB3N,MAAMC,QAAQoE,GACxC,GAAItE,EAASsE,IAASsJ,EAClB,IAAK,MAAMjM,KAAO2C,EACVrE,MAAMC,QAAQoE,EAAK3C,KAClB3B,EAASsE,EAAK3C,MAAU0C,EAAkBC,EAAK3C,KAChD+D,EAAO/D,GAAO1B,MAAMC,QAAQoE,EAAK3C,IAAQ,GAAK,CAAC,EAC/CgM,GAAgBrJ,EAAK3C,GAAM+D,EAAO/D,KAE5B7B,EAAkBwE,EAAK3C,MAC7B+D,EAAO/D,IAAO,GAI1B,OAAO+D,CACX,CACA,SAASmI,GAAgCvJ,EAAMT,EAAYiK,GACvD,MAAMF,EAAoB3N,MAAMC,QAAQoE,GACxC,GAAItE,EAASsE,IAASsJ,EAClB,IAAK,MAAMjM,KAAO2C,EACVrE,MAAMC,QAAQoE,EAAK3C,KAClB3B,EAASsE,EAAK3C,MAAU0C,EAAkBC,EAAK3C,IAC5CV,EAAY4C,IACZ6I,GAAYoB,EAAsBnM,IAClCmM,EAAsBnM,GAAO1B,MAAMC,QAAQoE,EAAK3C,IAC1CgM,GAAgBrJ,EAAK3C,GAAM,IAC3B,IAAKgM,GAAgBrJ,EAAK3C,KAGhCkM,GAAgCvJ,EAAK3C,GAAM7B,EAAkB+D,GAAc,CAAC,EAAIA,EAAWlC,GAAMmM,EAAsBnM,IAI3HmM,EAAsBnM,IAAQgL,GAAUrI,EAAK3C,GAAMkC,EAAWlC,IAI1E,OAAOmM,CACX,CACA,IAAIC,GAAiB,CAACC,EAAenK,IAAegK,GAAgCG,EAAenK,EAAY8J,GAAgB9J,IAE3HoK,GAAkB,CAACrO,GAASgJ,gBAAeqB,cAAaiE,gBAAiBjN,EAAYrB,GACnFA,EACAgJ,EACc,KAAVhJ,GAAgBE,EAAkBF,GAC9BuO,KACCvO,EACLqK,GAAevG,EAAS9D,GACpB,IAAIC,KAAKD,GACTsO,EACIA,EAAWtO,GACXA,EAElB,SAASwO,GAAcvI,GACnB,MAAME,EAAMF,EAAGE,IACf,KAAIF,EAAGI,KAAOJ,EAAGI,KAAK4B,OAAO9B,GAAQA,EAAI5C,WAAY4C,EAAI5C,UAGzD,OAAIyD,EAAYb,GACLA,EAAIsI,MAEXvH,EAAaf,GACN2B,GAAc7B,EAAGI,MAAMrG,MAE9B4N,GAAiBzH,GACV,IAAIA,EAAIuI,iBAAiBrK,KAAI,EAAGrE,WAAYA,IAEnDJ,EAAgBuG,GACTqB,EAAiBvB,EAAGI,MAAMrG,MAE9BqO,GAAgBhN,EAAY8E,EAAInG,OAASiG,EAAGE,IAAInG,MAAQmG,EAAInG,MAAOiG,EAC9E,CAEA,IAcI0I,GAAgBC,GAASvN,EAAYuN,QACnCrN,EACA4F,EAAQyH,GACJA,EAAKC,OACLzO,EAASwO,GACLzH,EAAQyH,EAAK5O,OACT4O,EAAK5O,MAAM6O,OACXD,EAAK5O,MACT4O,EAWd,SAASE,GAAkBjK,EAAQkK,EAASlO,GACxC,MAAMgG,EAAQrF,EAAIqD,EAAQhE,GAC1B,GAAIgG,GAAS7B,EAAMnE,GACf,MAAO,CACHgG,QACAhG,QAGR,MAAMD,EAAQC,EAAKgB,MAAM,KACzB,KAAOjB,EAAMiC,QAAQ,CACjB,MAAMyB,EAAY1D,EAAMoO,KAAK,KACvBhJ,EAAQxE,EAAIuN,EAASzK,GACrB2K,EAAazN,EAAIqD,EAAQP,GAC/B,GAAI0B,IAAU3F,MAAMC,QAAQ0F,IAAUnF,IAASyD,EAC3C,MAAO,CAAEzD,QAEb,GAAIoO,GAAcA,EAAWnP,KACzB,MAAO,CACHe,KAAMyD,EACNuC,MAAOoI,GAGfrO,EAAMsO,KACV,CACA,MAAO,CACHrO,OAER,CAoBA,MAAMsO,GAAiB,CACnB5D,KAAMtJ,EACNmN,eAAgBnN,EAChBoN,kBAAkB,GAEtB,SAASC,GAAkBnM,EAAQ,CAAC,GAChC,IAgCIoM,EAhCAC,EAAW,IACRL,MACAhM,GAEHsM,EAAa,CACbC,SAAS,EACTC,cAAc,EACdC,YAAa,CAAC,EACdC,aAAa,EACbC,YAAa,EACbC,cAAe,CAAC,EAChBC,cAAc,EACdC,oBAAoB,EACpB3I,SAAS,EACTzC,OAAQ,CAAC,GAETkK,EAAU,CAAC,EACXmB,EAAiBjF,GAAYuE,EAASpB,gBAAkB,CAAC,EACzD+B,EAAcX,EAASY,iBACrB,CAAC,EACDnF,GAAYiF,GACdG,EAAc,CACdC,QAAQ,EACRrH,OAAO,EACP9E,OAAO,GAEPH,EAAS,CACTiF,MAAO,IAAIkC,IACXoF,QAAS,IAAIpF,IACbqF,MAAO,IAAIrF,IACXhH,MAAO,IAAIgH,KAGXsF,EAAQ,EACRC,EAAiB,CAAC,EACtB,MAAMrO,EAAkB,CACpBqN,SAAS,EACTE,aAAa,EACbG,eAAe,EACfJ,cAAc,EACdrI,SAAS,EACTzC,QAAQ,GAEN8L,EAAY,CACdxM,MAAOqI,KACPgE,MAAOhE,KACPoE,MAAOpE,MAELqE,EAA6BvF,GAAmBkE,EAASjE,MACzDuF,EAA4BxF,GAAmBkE,EAASJ,gBACxD2B,EAAmCvB,EAASwB,eAAiB/O,EAK7DgP,EAAe5I,MAAO6I,IACxB,IAAI5J,GAAU,EAYd,OAXIjF,EAAgBiF,UAChBA,EAAUkI,EAAS2B,SACbxO,SAAqByO,KAAkBvM,cACjCwM,EAAyBtC,GAAS,GACzCmC,GAAoB5J,IAAYmI,EAAWnI,UAC5CmI,EAAWnI,QAAUA,EACrBqJ,EAAUC,MAAMlN,KAAK,CACjB4D,cAILA,CAAO,EA0CZgK,EAAsB,CAACzQ,EAAM0Q,EAAsBvR,EAAOmG,KAC5D,MAAMH,EAAQxE,EAAIuN,EAASlO,GAC3B,GAAImF,EAAO,CACP,MAAMrE,EAAeH,EAAI2O,EAAatP,EAAMQ,EAAYrB,GAASwB,EAAI0O,EAAgBrP,GAAQb,GAC7FqB,EAAYM,IACPwE,GAAOA,EAAIqL,gBACZD,EACElM,EAAI8K,EAAatP,EAAM0Q,EAAuB5P,EAAe6M,GAAcxI,EAAMC,KACjFwL,EAAc5Q,EAAMc,GAC1B0O,EAAYpH,OAASgI,GACzB,GAEES,EAAsB,CAAC7Q,EAAM8Q,EAAYpL,EAAaqL,EAAaC,KACrE,IAAIC,GAAe,EACnB,MAAMC,EAAS,CACXlR,QAEEmR,EAAyBxQ,EAAIiO,EAAWM,cAAelP,GAC7D,GAAIwB,EAAgBqN,QAAS,CACzB,MAAMuC,EAAsBxC,EAAWC,QACvCD,EAAWC,QAAUqC,EAAOrC,QAAUwC,IACtCJ,EAAeG,IAAwBF,EAAOrC,OAClD,CACA,GAAIrN,EAAgBuN,eAAiBrJ,GAAeqL,GAAc,CAC9D,MAAMO,EAAuB3Q,EAAIiO,EAAWG,YAAa/O,GAC1BkM,GAAUvL,EAAI0O,EAAgBrP,GAAO8Q,GAE9D7F,GAAM2D,EAAWG,YAAa/O,GAC9BwE,EAAIoK,EAAWG,YAAa/O,GAAM,GACxCkR,EAAOnC,YAAcH,EAAWG,YAChCkC,EACIA,GACIK,IAAyB3Q,EAAIiO,EAAWG,YAAa/O,EACjE,CAUA,OATI0F,IAAgByL,IAChB3M,EAAIoK,EAAWM,cAAelP,EAAM0F,GACpCwL,EAAOhC,cAAgBN,EAAWM,cAClC+B,EACIA,GACKzP,EAAgB0N,eACbiC,IAA2BzL,GAE3CuL,GAAgBD,GAAgBlB,EAAUC,MAAMlN,KAAKqO,GAC9CD,EAAeC,EAAS,CAAC,CAAC,EAE/BK,EAAsB/J,MAAOxH,EAAMyG,EAAST,EAAOwL,KACrD,MAAMC,EAAqB9Q,EAAIiO,EAAW5K,OAAQhE,GAC5C0R,EAAoBlQ,EAAgBiF,SAAWmI,EAAWnI,UAAYA,EA1G/D,IAAC3D,EAsHd,GAXIR,EAAMqP,YAAc3L,GA3GVlD,EA4GoB,IAvDjB,EAAC9C,EAAMgG,KACxBxB,EAAIoK,EAAW5K,OAAQhE,EAAMgG,GAC7B8J,EAAUC,MAAMlN,KAAK,CACjBmB,OAAQ4K,EAAW5K,QACrB,EAmDsC4N,CAAa5R,EAAMgG,GAAvD0I,EA5GwBmD,IAC5BC,aAAalC,GACbA,EAAQ3F,OAAO8H,WAAWjP,EAAU+O,EAAK,EA2GrCnD,EAAmBpM,EAAMqP,cAGzBG,aAAalC,GACblB,EAAqB,KACrB1I,EACMxB,EAAIoK,EAAW5K,OAAQhE,EAAMgG,GAC7BiF,GAAM2D,EAAW5K,OAAQhE,KAE9BgG,GAASkG,GAAUuF,EAAoBzL,GAASyL,KAChD3P,EAAc0P,IACfE,EAAmB,CACnB,MAAMM,EAAmB,IAClBR,KACCE,EAAoB,CAAEjL,WAAY,CAAC,EACvCzC,OAAQ4K,EAAW5K,OACnBhE,QAEJ4O,EAAa,IACNA,KACAoD,GAEPlC,EAAUC,MAAMlN,KAAKmP,EACzB,CACAnC,EAAe7P,KACXwB,EAAgBsN,eACfnN,OAAOkF,OAAOgJ,GAAgBlK,MAAMsM,GAAMA,MAC3CnC,EAAUC,MAAMlN,KAAK,CACjBiM,cAAc,IAElBe,EAAiB,CAAC,EACtB,EAEEU,EAAiB/I,MAAOxH,GAAS2O,EAAS2B,eACpC3B,EAAS2B,SAAS,IAAKhB,GAAeX,EAASuD,QAxRtC,EAAChN,EAAagJ,EAASiC,EAAczI,KAC1D,MAAMzC,EAAS,CAAC,EAChB,IAAK,MAAMjF,KAAQkF,EAAa,CAC5B,MAAMC,EAAQxE,EAAIuN,EAASlO,GAC3BmF,GAASX,EAAIS,EAAQjF,EAAMmF,EAAMC,GACrC,CACA,MAAO,CACH+K,eACApQ,MAAO,IAAImF,GACXD,SACAyC,4BACH,EA6QmEyK,CAAmBnS,GAAQmD,EAAOiF,MAAO8F,EAASS,EAASwB,aAAcxB,EAASjH,4BAChJ,CAAC,EAgBD8I,EAA2BhJ,MAAOvC,EAAQmN,EAAsBF,EAAU,CAC5EG,OAAO,MAEP,IAAK,MAAMrS,KAAQiF,EAAQ,CACvB,MAAME,EAAQF,EAAOjF,GACrB,GAAImF,EAAO,CACP,MAAM,GAAEC,KAAO0L,GAAe3L,EAC9B,GAAIC,EAAI,CACJ,MAAMkN,EAAmBnP,EAAOwM,MAAM1P,IAAImF,EAAGpF,MACvCuS,QAAmBhL,GAAcpC,EAAOxE,EAAI2O,EAAalK,EAAGpF,MAAOkQ,EAAkCvB,EAASjH,0BAA2B4K,GAC/I,GAAIC,EAAWnN,EAAGpF,QACdkS,EAAQG,OAAQ,EACZD,GACA,OAGPA,IACIzR,EAAI4R,EAAYnN,EAAGpF,MACdsS,EACIvM,EAA0B6I,EAAW5K,OAAQuO,EAAYnN,EAAGpF,MAC5DwE,EAAIoK,EAAW5K,OAAQoB,EAAGpF,KAAMuS,EAAWnN,EAAGpF,OAClDiL,GAAM2D,EAAW5K,OAAQoB,EAAGpF,MAC1C,CACA8Q,SACWN,EAAyBM,EAAYsB,EAAsBF,EAC1E,CACJ,CACA,OAAOA,EAAQG,KAAK,EAalBhB,EAAY,CAACrR,EAAM6D,KAAU7D,GAAQ6D,GAAQW,EAAI8K,EAAatP,EAAM6D,IACrEqI,GAAUsG,IAAanD,IACtBoD,EAAY,CAAC1S,EAAOe,EAAcuC,KACpC,MAAMqP,EAAc,IACZlD,EAAYpH,MACVkH,EACA9O,EAAYM,GACRuO,EACApM,EAASlD,GACL,CAAE,CAACA,GAAQe,GACXA,GAElB,OAAOoC,EAAoBnD,EAAOoD,EAAQuP,EAAarP,EAAS,EAG9DuN,EAAgB,CAAC5Q,EAAMb,EAAOyH,EAAU,CAAC,KAC3C,MAAMzB,EAAQxE,EAAIuN,EAASlO,GAC3B,IAAI8Q,EAAa3R,EACjB,GAAIgG,EAAO,CACP,MAAMwN,EAAiBxN,EAAMC,GACzBuN,KACCA,EAAejQ,UACZ8B,EAAI8K,EAAatP,EAAMwN,GAAgBrO,EAAOwT,IAClD7B,EACI9G,IAAS2C,GAAcgG,EAAerN,MAAQjG,EAAkBF,GAC1D,GACAA,EACN4N,GAAiB4F,EAAerN,KAChC,IAAIqN,EAAerN,IAAIsB,SAASgM,SAASC,GAAeA,EAAUC,SAAWhC,EAAWrE,SAASoG,EAAU1T,SAEtGwT,EAAenN,KAChBzG,EAAgB4T,EAAerN,KAC/BqN,EAAenN,KAAKxD,OAAS,EACvB2Q,EAAenN,KAAKoN,SAASG,IAAiBA,EAAYrQ,WACvDqQ,EAAYlT,QAAUL,MAAMC,QAAQqR,KAC7BA,EAAW3O,MAAM0B,GAASA,IAASkP,EAAY5T,QACjD2R,IAAeiC,EAAY5T,SACnCwT,EAAenN,KAAK,KACjBmN,EAAenN,KAAK,GAAG3F,UAAYiR,GAG5C6B,EAAenN,KAAKoN,SAASI,GAAcA,EAASnT,QAAUmT,EAAS7T,QAAU2R,IAGhF3K,EAAYwM,EAAerN,KAChCqN,EAAerN,IAAInG,MAAQ,IAG3BwT,EAAerN,IAAInG,MAAQ2R,EACtB6B,EAAerN,IAAIrG,MACpB6Q,EAAUxM,MAAMT,KAAK,CACjB7C,UAKpB,EACC4G,EAAQmK,aAAenK,EAAQqM,cAC5BpC,EAAoB7Q,EAAM8Q,EAAYlK,EAAQqM,YAAarM,EAAQmK,aAAa,GACpFnK,EAAQsM,gBAAkBC,EAAQnT,EAAK,EAErCoT,EAAY,CAACpT,EAAMb,EAAOyH,KAC5B,IAAK,MAAMyM,KAAYlU,EAAO,CAC1B,MAAM2R,EAAa3R,EAAMkU,GACnB5P,EAAY,GAAGzD,KAAQqT,IACvBlO,EAAQxE,EAAIuN,EAASzK,IAC1BN,EAAOwM,MAAM1P,IAAID,IACbiM,GAAY6E,MACZ3L,GAAUA,EAAMC,KAChBlG,EAAa4R,GAEZF,EAAcnN,EAAWqN,EAAYlK,GADrCwM,EAAU3P,EAAWqN,EAAYlK,EAE3C,GAEE0M,EAAW,CAACtT,EAAMb,EAAOyH,EAAU,CAAC,KACtC,MAAMzB,EAAQxE,EAAIuN,EAASlO,GACrB2H,EAAexE,EAAOwM,MAAM1P,IAAID,GAChCuT,EAAanJ,GAAYjL,GAC/BqF,EAAI8K,EAAatP,EAAMuT,GACnB5L,GACAmI,EAAUH,MAAM9M,KAAK,CACjB7C,OACA6G,OAAQyI,KAEP9N,EAAgBqN,SAAWrN,EAAgBuN,cAC5CnI,EAAQmK,cACRnC,EAAWG,YAAczB,GAAe+B,EAAgBC,GACxDQ,EAAUC,MAAMlN,KAAK,CACjB7C,OACA+O,YAAaH,EAAWG,YACxBF,QAASwC,EAAUrR,EAAMuT,QAKjCpO,GAAUA,EAAMC,IAAO/F,EAAkBkU,GAEnC3C,EAAc5Q,EAAMuT,EAAY3M,GADhCwM,EAAUpT,EAAMuT,EAAY3M,GAGtCnB,EAAUzF,EAAMmD,IAAW2M,EAAUC,MAAMlN,KAAK,CAAC,GACjDiN,EAAUxM,MAAMT,KAAK,CACjB7C,QACF,EAEAwT,EAAWhM,MAAO7H,IACpB,MAAMC,EAASD,EAAMC,OACrB,IAAII,EAAOJ,EAAOI,KAClB,MAAMmF,EAAQxE,EAAIuN,EAASlO,GAC3B,GAAImF,EAAO,CACP,IAAIa,EACAS,EACJ,MAAMqK,EAAalR,EAAOX,KACpB0O,GAAcxI,EAAMC,IACpB1F,EAAcC,GACd+F,EAAc/F,EAAMV,OAASkC,GAAexB,EAAMV,OAASkC,EAC3DsS,KA5aG7M,EA4aoCzB,EAAMC,IA5atBgD,QACpCxB,EAAQgB,UACLhB,EAAQmB,KACRnB,EAAQoB,KACRpB,EAAQiB,WACRjB,EAAQkB,WACRlB,EAAQqB,SACRrB,EAAQsB,WAsaCyG,EAAS2B,UACT3P,EAAIiO,EAAW5K,OAAQhE,IACvBmF,EAAMC,GAAGsO,OAzYL,EAAChO,EAAaiO,EAAW3E,EAAaT,EAAgB7D,KACnEA,EAAKI,WAGCkE,GAAetE,EAAKK,YACjB4I,GAAajO,IAEjBsJ,EAAcT,EAAe3D,SAAWF,EAAKE,WAC1ClF,IAEHsJ,EAAcT,EAAe1D,WAAaH,EAAKG,aAC7CnF,GA+XCkO,CAAelO,EAAa/E,EAAIiO,EAAWM,cAAelP,GAAO4O,EAAWI,YAAaiB,EAA2BD,GAClH6D,EAAUpO,EAAUzF,EAAMmD,EAAQuC,GACxClB,EAAI8K,EAAatP,EAAM8Q,GACnBpL,GACAP,EAAMC,GAAG0O,QAAU3O,EAAMC,GAAG0O,OAAOnU,GACnC+O,GAAsBA,EAAmB,IAEpCvJ,EAAMC,GAAGoO,UACdrO,EAAMC,GAAGoO,SAAS7T,GAEtB,MAAM6R,EAAaX,EAAoB7Q,EAAM8Q,EAAYpL,GAAa,GAChEsL,GAAgBlP,EAAc0P,IAAeqC,EAMnD,IALCnO,GACGoK,EAAUxM,MAAMT,KAAK,CACjB7C,OACAf,KAAMU,EAAMV,OAEhBwU,EACA,OAAQzC,GACJlB,EAAUC,MAAMlN,KAAK,CAAE7C,UAAU6T,EAAU,CAAC,EAAIrC,IAOxD,IALC9L,GAAemO,GAAW/D,EAAUC,MAAMlN,KAAK,CAAC,GACjDgN,EAAe7P,IAAQ6P,EAAe7P,GAAQ,GAC9C8P,EAAUC,MAAMlN,KAAK,CACjBiM,cAAc,IAEdH,EAAS2B,SAAU,CACnB,MAAM,OAAEtM,SAAiBuM,EAAe,CAACvQ,IACnC+T,EAA4B9F,GAAkBW,EAAW5K,OAAQkK,EAASlO,GAC1EgU,EAAoB/F,GAAkBjK,EAAQkK,EAAS6F,EAA0B/T,MAAQA,GAC/FgG,EAAQgO,EAAkBhO,MAC1BhG,EAAOgU,EAAkBhU,KACzByG,EAAU3E,EAAckC,EAC5B,MAEIgC,SAAeuB,GAAcpC,EAAOxE,EAAI2O,EAAatP,GAAOkQ,EAAkCvB,EAASjH,4BAA4B1H,GACnIyG,QAAgB2J,GAAa,GAEjCjL,EAAMC,GAAGsO,MACLP,EAAQhO,EAAMC,GAAGsO,MACrBnC,EAAoBvR,EAAMyG,EAAST,EAAOwL,EAC9C,CAzdY,IAAC5K,CAydb,EAEEuM,EAAU3L,MAAOxH,EAAM4G,EAAU,CAAC,KACpC,IAAIH,EACAsD,EACJ,MAAMkK,EAAa7R,EAAsBpC,GAIzC,GAHA8P,EAAUC,MAAMlN,KAAK,CACjBiM,cAAc,IAEdH,EAAS2B,SAAU,CACnB,MAAMtM,OAjOsBwD,OAAOzH,IACvC,MAAM,OAAEiE,SAAiBuM,IACzB,GAAIxQ,EACA,IAAK,MAAMC,KAAQD,EAAO,CACtB,MAAMiG,EAAQrF,EAAIqD,EAAQhE,GAC1BgG,EACMxB,EAAIoK,EAAW5K,OAAQhE,EAAMgG,GAC7BiF,GAAM2D,EAAW5K,OAAQhE,EACnC,MAGA4O,EAAW5K,OAASA,EAExB,OAAOA,CAAM,EAoNYkQ,CAA4B1T,EAAYR,GAAQA,EAAOiU,GAC5ExN,EAAU3E,EAAckC,GACxB+F,EAAmB/J,GACZiU,EAAWtO,MAAM3F,GAASW,EAAIqD,EAAQhE,KACvCyG,CACV,MACSzG,GACL+J,SAA0BoK,QAAQC,IAAIH,EAAWzQ,KAAIgE,MAAO/D,IACxD,MAAM0B,EAAQxE,EAAIuN,EAASzK,GAC3B,aAAa+M,EAAyBrL,GAASA,EAAMC,GAAK,CAAE,CAAC3B,GAAY0B,GAAUA,EAAM,MACxFiC,MAAM7G,UACRwJ,GAAqB6E,EAAWnI,UAAY2J,KAG/CrG,EAAmBtD,QAAgB+J,EAAyBtC,GAchE,OAZA4B,EAAUC,MAAMlN,KAAK,KACZI,EAASjD,IACTwB,EAAgBiF,SAAWA,IAAYmI,EAAWnI,QACjD,CAAC,EACD,CAAEzG,WACJ2O,EAAS2B,SAAW,CAAE7J,WAAY,CAAC,EACvCzC,OAAQ4K,EAAW5K,OACnB8K,cAAc,IAElBlI,EAAQyN,cACHtK,GACD/E,EAAakJ,GAAUhN,GAAQP,EAAIiO,EAAW5K,OAAQ9C,IAAMlB,EAAOiU,EAAa9Q,EAAOiF,OACpF2B,CAAgB,EAErByI,EAAayB,IACf,MAAMpN,EAAS,IACRwI,KACCG,EAAYpH,MAAQkH,EAAc,CAAC,GAE3C,OAAO9O,EAAYyT,GACbpN,EACA5D,EAASgR,GACLtT,EAAIkG,EAAQoN,GACZA,EAAWzQ,KAAKxD,GAASW,EAAIkG,EAAQ7G,IAAM,EAEnDsU,EAAgB,CAACtU,EAAMuB,KAAc,CACvCgT,UAAW5T,GAAKY,GAAaqN,GAAY5K,OAAQhE,GACjD6O,UAAWlO,GAAKY,GAAaqN,GAAYG,YAAa/O,GACtD2T,YAAahT,GAAKY,GAAaqN,GAAYM,cAAelP,GAC1DgG,MAAOrF,GAAKY,GAAaqN,GAAY5K,OAAQhE,KA4B3CwU,GAAa,CAACxU,EAAM4G,EAAU,CAAC,KACjC,IAAK,MAAMnD,KAAazD,EAAOoC,EAAsBpC,GAAQmD,EAAOiF,MAChEjF,EAAOiF,MAAMqM,OAAOhR,GACpBN,EAAOwM,MAAM8E,OAAOhR,GAChB9C,EAAIuN,EAASzK,KACRmD,EAAQ8N,YACTzJ,GAAMiD,EAASzK,GACfwH,GAAMqE,EAAa7L,KAEtBmD,EAAQ+N,WAAa1J,GAAM2D,EAAW5K,OAAQP,IAC9CmD,EAAQgO,WAAa3J,GAAM2D,EAAWG,YAAatL,IACnDmD,EAAQiO,aAAe5J,GAAM2D,EAAWM,cAAezL,IACvDkL,EAASY,mBACL3I,EAAQkO,kBACT7J,GAAMoE,EAAgB5L,IAGlCqM,EAAUxM,MAAMT,KAAK,CAAC,GACtBiN,EAAUC,MAAMlN,KAAK,IACd+L,KACEhI,EAAQgO,UAAiB,CAAE/F,QAASwC,KAAhB,CAAC,KAE7BzK,EAAQmO,aAAe3E,GAAc,EAEpC4E,GAAW,CAAChV,EAAM4G,EAAU,CAAC,KAC/B,IAAIzB,EAAQxE,EAAIuN,EAASlO,GACzB,MAAMiV,EAAoB/O,EAAUU,EAAQlE,UAgB5C,OAfA8B,EAAI0J,EAASlO,EAAM,CACfoF,GAAI,IACID,GAASA,EAAMC,GAAKD,EAAMC,GAAK,CAAEE,IAAK,CAAEtF,SAC5CA,OACAoI,OAAO,KACJxB,KAGXzD,EAAOiF,MAAM7E,IAAIvD,GACjBmF,EACM8P,GACEzQ,EAAI8K,EAAatP,EAAM4G,EAAQlE,cACzBhC,EACAC,EAAI2O,EAAatP,EAAM2N,GAAcxI,EAAMC,MACnDqL,EAAoBzQ,GAAM,EAAM4G,EAAQzH,OACvC,IACC8V,EAAoB,CAAEvS,SAAUkE,EAAQlE,UAAa,CAAC,KACtDiM,EAASjH,0BACP,CACEE,WAAYhB,EAAQgB,SACpBG,IAAK+F,GAAalH,EAAQmB,KAC1BC,IAAK8F,GAAalH,EAAQoB,KAC1BF,UAAWgG,GAAalH,EAAQkB,WAChCD,UAAWiG,GAAalH,EAAQiB,WAChCI,QAAS6F,GAAalH,EAAQqB,UAEhC,CAAC,EACPjI,OACAwT,WACAM,OAAQN,EACRlO,IAAMA,IACF,GAAIA,EAAK,CACL0P,GAAShV,EAAM4G,GACfzB,EAAQxE,EAAIuN,EAASlO,GACrB,MAAMkV,EAAW1U,EAAY8E,EAAInG,QAC3BmG,EAAI6P,kBACA7P,EAAI6P,iBAAiB,yBAAyB,IAElD7P,EACA8P,EAntBF,CAAC9P,GAAQe,EAAaf,IAAQvG,EAAgBuG,GAmtB1BoD,CAAkBwM,GACpC1P,EAAOL,EAAMC,GAAGI,MAAQ,GAC9B,GAAI4P,EACE5P,EAAKrD,MAAM2E,GAAWA,IAAWoO,IACjCA,IAAa/P,EAAMC,GAAGE,IACxB,OAEJd,EAAI0J,EAASlO,EAAM,CACfoF,GAAI,IACGD,EAAMC,MACLgQ,EACE,CACE5P,KAAM,IACCA,EAAKlF,OAAO0M,IACfkI,KACM1V,MAAMC,QAAQkB,EAAI0O,EAAgBrP,IAClC,CAAC,CAAC,GACF,IAEVsF,IAAK,CAAErG,KAAMiW,EAASjW,KAAMe,SAE9B,CAAEsF,IAAK4P,MAGrBzE,EAAoBzQ,GAAM,OAAOU,EAAWwU,EAChD,MAEI/P,EAAQxE,EAAIuN,EAASlO,EAAM,CAAC,GACxBmF,EAAMC,KACND,EAAMC,GAAGgD,OAAQ,IAEpBuG,EAASY,kBAAoB3I,EAAQ2I,qBAChCzP,EAAmBqD,EAAOwM,MAAO3P,KAASwP,EAAYC,SACxDtM,EAAOuM,QAAQnM,IAAIvD,EAC3B,EAEP,EAwKL,MAAO,CACHqV,QAAS,CACLL,YACAR,cACAF,gBACA/D,iBACAkC,YACApB,YACAjB,eACAkF,iBArhBiB,KACrB,IAAK,MAAMtV,KAAQmD,EAAOuM,QAAS,CAC/B,MAAMvK,EAAQxE,EAAIuN,EAASlO,GAC3BmF,IACKA,EAAMC,GAAGI,KACJL,EAAMC,GAAGI,KAAK4B,OAAO9B,IAAS0H,GAAK1H,MAClC0H,GAAK7H,EAAMC,GAAGE,OACrBkP,GAAWxU,EACnB,CACAmD,EAAOuM,QAAU,IAAIpF,GAAK,EA6gBtBiL,kBAhsBkB,CAACvV,EAAM6G,EAAS,GAAI2O,EAAQC,EAAMC,GAAkB,EAAMC,GAA6B,KAC7G,GAAIF,GAAQD,EAAQ,CAEhB,GADAhG,EAAYC,QAAS,EACjBkG,GAA8BnW,MAAMC,QAAQkB,EAAIuN,EAASlO,IAAQ,CACjE,MAAM0S,EAAc8C,EAAO7U,EAAIuN,EAASlO,GAAOyV,EAAKG,KAAMH,EAAKI,MAC/DH,GAAmBlR,EAAI0J,EAASlO,EAAM0S,EAC1C,CACA,GAAIlR,EAAgBwC,QAChB2R,GACAnW,MAAMC,QAAQkB,EAAIiO,EAAW5K,OAAQhE,IAAQ,CAC7C,MAAMgE,EAASwR,EAAO7U,EAAIiO,EAAW5K,OAAQhE,GAAOyV,EAAKG,KAAMH,EAAKI,MACpEH,GAAmBlR,EAAIoK,EAAW5K,OAAQhE,EAAMgE,GAzF1C,EAACsB,EAAKtF,MAAUK,EAAQM,EAAI2E,EAAKtF,IAAOgC,QAAUiJ,GAAM3F,EAAKtF,EAAK,EA0FxE8V,CAAgBlH,EAAW5K,OAAQhE,EACvC,CACA,GAAIwB,EAAgB0N,eAChByG,GACAnW,MAAMC,QAAQkB,EAAIiO,EAAWM,cAAelP,IAAQ,CACpD,MAAMkP,EAAgBsG,EAAO7U,EAAIiO,EAAWM,cAAelP,GAAOyV,EAAKG,KAAMH,EAAKI,MAClFH,GAAmBlR,EAAIoK,EAAWM,cAAelP,EAAMkP,EAC3D,CACI1N,EAAgBuN,cAChBH,EAAWG,YAAczB,GAAe+B,EAAgBC,IAE5DQ,EAAUC,MAAMlN,KAAK,CACjBgM,QAASwC,EAAUrR,EAAM6G,GACzBkI,YAAaH,EAAWG,YACxB/K,OAAQ4K,EAAW5K,OACnByC,QAASmI,EAAWnI,SAE5B,MAEIjC,EAAI8K,EAAatP,EAAM6G,EAC3B,EAiqBIkP,eA9fgB/V,GAASK,EAAQM,EAAI6O,EAAYpH,MAAQkH,EAAcD,EAAgBrP,EAAMsC,EAAMiN,iBAAmB5O,EAAI0O,EAAgBrP,EAAM,IAAM,KA+ftJ8P,YACAtO,kBACA,WAAI0M,GACA,OAAOA,CACX,EACA,eAAIoB,GACA,OAAOA,CACX,EACA,eAAIE,GACA,OAAOA,CACX,EACA,eAAIA,CAAYrQ,GACZqQ,EAAcrQ,CAClB,EACA,kBAAIkQ,GACA,OAAOA,CACX,EACA,UAAIlM,GACA,OAAOA,CACX,EACA,UAAIA,CAAOhE,GACPgE,EAAShE,CACb,EACA,cAAIyP,GACA,OAAOA,CACX,EACA,cAAIA,CAAWzP,GACXyP,EAAazP,CACjB,EACA,YAAIwP,GACA,OAAOA,CACX,EACA,YAAIA,CAASxP,GACTwP,EAAW,IACJA,KACAxP,EAEX,GAEJgU,UACA6B,YACAgB,aA3NiB,CAACC,EAASC,IAAc1O,MAAO2O,IAC5CA,IACAA,EAAEC,gBAAkBD,EAAEC,iBACtBD,EAAEE,SAAWF,EAAEE,WAEnB,IAAIC,GAAoB,EACpB5D,EAActI,GAAYkF,GAC9BQ,EAAUC,MAAMlN,KAAK,CACjBsM,cAAc,IAElB,IACI,GAAIR,EAAS2B,SAAU,CACnB,MAAM,OAAEtM,EAAM,OAAE6C,SAAiB0J,IACjC3B,EAAW5K,OAASA,EACpB0O,EAAc7L,CAClB,YAEU2J,EAAyBtC,GAE/BpM,EAAc8M,EAAW5K,SACzB8L,EAAUC,MAAMlN,KAAK,CACjBmB,OAAQ,CAAC,EACTmL,cAAc,UAEZ8G,EAAQvD,EAAayD,KAGvBD,SACMA,EAAU,IAAKtH,EAAW5K,QAAUmS,GAE9CxH,EAASH,kBACLxJ,EAAakJ,GAAUhN,GAAQP,EAAIiO,EAAW5K,OAAQ9C,IAAMiC,EAAOiF,OAE/E,CACA,MAAOmO,GAEH,MADAD,GAAoB,EACdC,CACV,CACA,QACI3H,EAAWI,aAAc,EACzBc,EAAUC,MAAMlN,KAAK,CACjBmM,aAAa,EACbG,cAAc,EACdC,mBAAoBtN,EAAc8M,EAAW5K,SAAWsS,EACxDrH,YAAaL,EAAWK,YAAc,EACtCjL,OAAQ4K,EAAW5K,QAE3B,GA6KAV,MAzUU,CAACtD,EAAMc,IAAiB6C,EAAW3D,GAC3C8P,EAAUxM,MAAMV,UAAU,CACxBC,KAAO2T,GAASxW,EAAKyS,OAAU/R,EAAWI,GAAe0V,KAE3D/D,EAAUzS,EAAMc,GAAc,GAsUhCwS,WACAd,YACAiE,MArJU,CAACrT,EAAYsT,EAAmB,CAAC,KAC3C,MAAMC,EAAgBvT,GAAciM,EAC9BuH,EAAqBxM,GAAYuM,GACjC9P,EAASzD,IAAetB,EAAcsB,GACtCwT,EACAvH,EAIN,GAHKqH,EAAiBG,oBAClBxH,EAAiBsH,IAEhBD,EAAiBI,WAAY,CAC9B,GAAIJ,EAAiBK,gBACjB,IAAK,MAAMtT,KAAaN,EAAOiF,MAC3BzH,EAAIiO,EAAWG,YAAatL,GACtBe,EAAIqC,EAAQpD,EAAW9C,EAAI2O,EAAa7L,IACxC6P,EAAS7P,EAAW9C,EAAIkG,EAAQpD,QAGzC,CACD,GAAIuG,IAASxJ,EAAY4C,GACrB,IAAK,MAAMpD,KAAQmD,EAAOiF,MAAO,CAC7B,MAAMjD,EAAQxE,EAAIuN,EAASlO,GAC3B,GAAImF,GAASA,EAAMC,GAAI,CACnB,MAAMuN,EAAiBnT,MAAMC,QAAQ0F,EAAMC,GAAGI,MACxCL,EAAMC,GAAGI,KAAK,GACdL,EAAMC,GAAGE,IACf,IACI,GAAIqH,GAAcgG,GAAiB,CAC/BA,EAAeqE,QAAQ,QAAQP,QAC/B,KACJ,CACJ,CACA,MAAOQ,GAAM,CACjB,CACJ,CAEJ/I,EAAU,CAAC,CACf,CACAoB,EAAchN,EAAMiN,iBACdmH,EAAiBG,kBACbzM,GAAYiF,GACZ,CAAC,EACLuH,EACN9G,EAAUH,MAAM9M,KAAK,CACjBgE,WAEJiJ,EAAUxM,MAAMT,KAAK,CACjBgE,UAER,CACA1D,EAAS,CACLiF,MAAO,IAAIkC,IACXoF,QAAS,IAAIpF,IACbqF,MAAO,IAAIrF,IACXhH,MAAO,IAAIgH,IACX5G,UAAU,EACV6B,MAAO,IAEXiK,EAAYpH,OACP5G,EAAgBiF,WAAaiQ,EAAiB3B,YACnDvF,EAAYlM,QAAUhB,EAAMiN,iBAC5BO,EAAUC,MAAMlN,KAAK,CACjBoM,YAAayH,EAAiBQ,gBACxBtI,EAAWK,YACX,EACNJ,QAAS6H,EAAiB9B,WAAa8B,EAAiBK,gBAClDnI,EAAWC,WACR6H,EAAiBG,mBACjB3K,GAAU9I,EAAYiM,IAC/BL,cAAa0H,EAAiBS,iBACxBvI,EAAWI,YAEjBD,YAAa2H,EAAiB9B,WAAa8B,EAAiBK,gBACtDnI,EAAWG,YACX2H,EAAiBG,mBAAqBzT,EAClCkK,GAAe+B,EAAgBjM,GAC/B,CAAC,EACX8L,cAAewH,EAAiB7B,YAC1BjG,EAAWM,cACX,CAAC,EACPlL,OAAQ0S,EAAiBU,WACnBxI,EAAW5K,OACX,CAAC,EACPmL,cAAc,EACdC,oBAAoB,GACtB,EAkEFiI,WA/Ke,CAACrX,EAAM4G,EAAU,CAAC,KAC7BjG,EAAIuN,EAASlO,KACTQ,EAAYoG,EAAQ9F,cACpBwS,EAAStT,EAAMW,EAAI0O,EAAgBrP,KAGnCsT,EAAStT,EAAM4G,EAAQ9F,cACvB0D,EAAI6K,EAAgBrP,EAAM4G,EAAQ9F,eAEjC8F,EAAQiO,aACT5J,GAAM2D,EAAWM,cAAelP,GAE/B4G,EAAQgO,YACT3J,GAAM2D,EAAWG,YAAa/O,GAC9B4O,EAAWC,QAAUjI,EAAQ9F,aACvBuQ,EAAUrR,EAAMW,EAAI0O,EAAgBrP,IACpCqR,KAELzK,EAAQ+N,YACT1J,GAAM2D,EAAW5K,OAAQhE,GACzBwB,EAAgBiF,SAAW2J,KAE/BN,EAAUC,MAAMlN,KAAK,IAAK+L,IAC9B,EAyJA0I,YAnWiBtX,IACjBA,EACMoC,EAAsBpC,GAAM4S,SAAS2E,GAActM,GAAM2D,EAAW5K,OAAQuT,KAC3E3I,EAAW5K,OAAS,CAAC,EAC5B8L,EAAUC,MAAMlN,KAAK,CACjBmB,OAAQ4K,EAAW5K,QACrB,EA8VFwQ,cACAgD,SA7Va,CAACxX,EAAMgG,EAAOY,KAC3B,MAAMtB,GAAO3E,EAAIuN,EAASlO,EAAM,CAAEoF,GAAI,CAAC,IAAKA,IAAM,CAAC,GAAGE,IACtDd,EAAIoK,EAAW5K,OAAQhE,EAAM,IACtBgG,EACHV,QAEJwK,EAAUC,MAAMlN,KAAK,CACjB7C,OACAgE,OAAQ4K,EAAW5K,OACnByC,SAAS,IAEbG,GAAWA,EAAQyN,aAAe/O,GAAOA,EAAIC,OAASD,EAAIC,OAAO,EAmVjEkS,SApEa,CAACzX,EAAM4G,EAAU,CAAC,KAC/B,MAAMzB,EAAQxE,EAAIuN,EAASlO,GAAMoF,GAC3B8P,EAAW/P,EAAMK,KAAOL,EAAMK,KAAK,GAAKL,EAAMG,IACpD4P,EAAS3P,QACTqB,EAAQ8Q,cAAgBxC,EAASyC,QAAQ,EAiEzCrD,gBAER,C,eCjoEA,OArBasD,IAAe,IAAd,KAAEC,GAAMD,EACpB,OAAoB,IAAhBC,EAAK7V,OAEL8V,EAAAA,cAAA,OAAKC,UAAU,WACbD,EAAAA,cAAA,OAAKC,UAAU,UAAS,gCACYD,EAAAA,cAAA,KAAGE,KAAK,wDAAuD,gBAMvGF,EAAAA,cAAA,OAAKC,UAAU,WAEXF,EAAKrU,KAAKyU,GACRH,EAAAA,cAACI,GAAAA,EAAG,CAACD,IAAKA,EAAK/W,IAAK+W,EAAIE,OAGxB,ECFV,OAjBkBC,IAChBN,EAAAA,cAAA,OAAKC,UAAU,aACbD,EAAAA,cAAA,SAAG,yBAEDA,EAAAA,cAAA,KAAGE,KAAK,wDAAuD,wBAE3D,KAENF,EAAAA,cAAA,SAAG,yCAEDA,EAAAA,cAAA,KAAGE,KAAK,yEAAwE,QAE5E,MCbV,OADa,CAAC,CAAC,OAAU,SAAU,MAAS,0BAA2B,IAAO,mDAAoD,YAAe,GAAI,WAAc,GAAI,SAAY,aAAc,QAAW,aAAc,SAAY,SAAU,YAAe,yxHAAoyH,KAAQ,aAAc,GAAM,qBAAsB,CAAC,OAAU,SAAU,MAAS,2BAA4B,IAAO,mDAAoD,YAAe,GAAI,WAAc,GAAI,SAAY,aAAc,QAAW,aAAc,SAAY,SAAU,YAAe,yvHAA0wH,KAAQ,aAAc,GAAM,qBAAsB,CAAC,OAAU,SAAU,MAAS,6BAA8B,IAAO,mDAAoD,YAAe,GAAI,WAAc,GAAI,SAAY,aAAc,QAAW,aAAc,SAAY,SAAU,YAAe,i0HAAk0H,KAAQ,aAAc,GAAM,qBAAsB,CAAC,OAAU,aAAc,MAAS,6BAA8B,IAAO,6GAA8G,YAAe,IAAK,WAAc,IAAK,SAAY,aAAc,QAAW,aAAc,SAAY,SAAU,YAAe,2sJAAquJ,KAAQ,aAAc,GAAM,yBAA0B,CAAC,OAAU,gBAAiB,MAAS,6CAA8C,IAAO,4BAA6B,YAAe,IAAK,WAAc,IAAK,SAAY,aAAc,QAAW,aAAc,SAAY,SAAU,YAAe,gnLAAinL,KAAQ,aAAc,GAAM,wBAAyB,CAAC,OAAU,gBAAiB,MAAS,kDAAmD,IAAO,4BAA6B,YAAe,IAAK,WAAc,IAAK,SAAY,aAAc,QAAW,aAAc,SAAY,SAAU,YAAe,+hLAAojL,KAAQ,aAAc,GAAM,wBAAyB,CAAC,OAAU,eAAgB,MAAS,oBAAqB,IAAO,+CAAgD,YAAe,IAAK,WAAc,IAAK,SAAY,aAAc,QAAW,aAAc,SAAY,SAAU,YAAe,2jDAAikD,KAAQ,aAAc,GAAM,0BAA2B,CAAC,OAAU,UAAW,MAAS,6BAA8B,IAAO,2BAA4B,YAAe,SAAU,WAAc,IAAK,SAAY,aAAc,QAAW,aAAc,SAAY,SAAU,YAAe,0nJAAopJ,KAAQ,aAAc,GAAM,sBAAuB,CAAC,OAAU,kBAAmB,MAAS,6BAA8B,IAAO,6BAA8B,YAAe,IAAK,WAAc,GAAI,SAAY,aAAc,QAAW,aAAc,SAAY,SAAU,YAAe,+gCAAghC,KAAQ,aAAc,GAAM,qBAAsB,CAAC,OAAU,kBAAmB,MAAS,oBAAqB,IAAO,2BAA4B,YAAe,GAAI,WAAc,IAAK,SAAY,aAAc,QAAW,aAAc,SAAY,SAAU,YAAe,89HAAo+H,KAAQ,aAAc,GAAM,sBAAuB,CAAC,OAAU,aAAc,MAAS,0CAA2C,IAAO,sBAAuB,YAAe,IAAK,WAAc,IAAK,SAAY,aAAc,QAAW,aAAc,SAAY,SAAU,YAAe,4pJAA4qJ,KAAQ,aAAc,GAAM,yBAA0B,CAAC,OAAU,SAAU,MAAS,gCAAiC,IAAO,2GAA4G,YAAe,IAAK,WAAc,IAAK,SAAY,aAAc,QAAW,aAAc,SAAY,4BAA6B,YAAe,iyKAAkyK,KAAQ,aAAc,GAAM,qBAAsB,CAAC,OAAU,eAAgB,MAAS,iBAAkB,IAAO,gDAAiD,YAAe,IAAK,WAAc,GAAI,SAAY,aAAc,QAAW,aAAc,SAAY,SAAU,YAAe,gzCAAszC,KAAQ,aAAc,GAAM,0BAA2B,CAAC,OAAU,SAAU,MAAS,0BAA2B,IAAO,uCAAwC,YAAe,IAAK,WAAc,IAAK,SAAY,aAAc,QAAW,aAAc,SAAY,SAAU,YAAe,s+BAAu+B,KAAQ,aAAc,GAAM,qBAAsB,CAAC,OAAU,QAAS,MAAS,8BAA+B,IAAO,sEAAuE,YAAe,KAAM,WAAc,IAAK,SAAY,aAAc,QAAW,aAAc,SAAY,SAAU,YAAe,2tBAA4tB,KAAQ,aAAc,GAAM,oBAAqB,CAAC,OAAU,SAAU,MAAS,+BAAgC,IAAO,wCAAyC,YAAe,IAAK,WAAc,GAAI,SAAY,aAAc,QAAW,aAAc,SAAY,SAAU,YAAe,0vBAA2vB,KAAQ,aAAc,GAAM,qBAAsB,CAAC,OAAU,mBAAoB,MAAS,+GAAgH,IAAO,qCAAsC,YAAe,IAAK,WAAc,IAAK,SAAY,aAAc,QAAW,aAAc,SAAY,gDAAiD,YAAe,qgCAAwgC,KAAQ,aAAc,GAAM,oBAAqB,CAAC,OAAU,WAAY,MAAS,oBAAqB,IAAO,sDAAuD,YAAe,IAAK,WAAc,IAAK,SAAY,aAAc,QAAW,aAAc,SAAY,SAAU,YAAe,gmCAAimC,KAAQ,aAAc,GAAM,uBAAwB,CAAC,OAAU,eAAgB,MAAS,4CAA6C,IAAO,qCAAsC,YAAe,GAAI,WAAc,IAAK,SAAY,aAAc,QAAW,aAAc,SAAY,SAAU,YAAe,wxBAAmyB,KAAQ,aAAc,GAAM,0BAA2B,CAAC,OAAU,YAAa,MAAS,mBAAoB,IAAO,0DAA2D,WAAc,IAAK,SAAY,aAAc,QAAW,aAAc,SAAY,SAAU,YAAe,okCAAylC,KAAQ,aAAc,GAAM,uBAAwB,CAAC,OAAU,YAAa,MAAS,mBAAoB,IAAO,0DAA2D,WAAc,IAAK,SAAY,aAAc,QAAW,aAAc,SAAY,SAAU,YAAe,i3DAA67D,KAAQ,aAAc,GAAM,uBAAwB,CAAC,OAAU,OAAQ,MAAS,oBAAqB,YAAe,IAAK,WAAc,IAAK,SAAY,aAAc,QAAW,aAAc,SAAY,SAAU,YAAe,w/DAA8/D,KAAQ,aAAc,GAAM,mBAAoB,CAAC,OAAU,YAAa,MAAS,wBAAyB,IAAO,+EAAgF,YAAe,IAAK,WAAc,GAAI,OAAU,CAAC,WAAY,SAAY,aAAc,QAAW,aAAc,SAAY,SAAU,YAAe,8dAA+d,KAAQ,aAAc,GAAM,wBAAyB,CAAC,OAAU,eAAgB,MAAS,2CAA4C,IAAO,gDAAiD,YAAe,GAAI,WAAc,IAAK,SAAY,aAAc,QAAW,aAAc,SAAY,SAAU,YAAe,2gBAAihB,KAAQ,aAAc,GAAM,0BAA2B,CAAC,OAAU,YAAa,MAAS,8BAA+B,IAAO,yEAA0E,YAAe,IAAK,WAAc,IAAK,OAAU,CAAC,WAAY,SAAY,aAAc,QAAW,aAAc,SAAY,SAAU,YAAe,2NAA4N,KAAQ,aAAc,GAAM,wBAAyB,CAAC,OAAU,kBAAmB,MAAS,qBAAsB,IAAO,6BAA8B,YAAe,IAAK,WAAc,GAAI,SAAY,aAAc,QAAW,aAAc,SAAY,SAAU,YAAe,0lCAA2lC,KAAQ,aAAc,GAAM,qBAAsB,CAAC,OAAU,UAAW,MAAS,oCAAqC,IAAO,kCAAmC,YAAe,IAAK,WAAc,GAAI,SAAY,aAAc,QAAW,aAAc,SAAY,eAAgB,YAAe,0rCAA2rC,KAAQ,aAAc,GAAM,sBAAuB,CAAC,OAAU,qBAAsB,MAAS,mBAAoB,IAAO,gIAAiI,YAAe,GAAI,WAAc,IAAK,SAAY,aAAc,QAAW,aAAc,SAAY,SAAU,YAAe,4SAA6S,KAAQ,aAAc,GAAM,oBAAqB,CAAC,OAAU,SAAU,MAAS,eAAgB,IAAO,6BAA8B,YAAe,IAAK,WAAc,GAAI,OAAU,CAAC,WAAY,SAAY,aAAc,QAAW,aAAc,SAAY,SAAU,YAAe,ihBAAkhB,KAAQ,aAAc,GAAM,qBAAsB,CAAC,OAAU,YAAa,MAAS,oBAAqB,IAAO,oCAAqC,YAAe,IAAK,WAAc,GAAI,OAAU,CAAC,WAAY,SAAY,aAAc,QAAW,aAAc,SAAY,SAAU,YAAe,iRAAkR,KAAQ,aAAc,GAAM,yBCuBx/yE,OAvBmBK,CAACR,EAAMvX,KAGxB,MAAMgY,EAAQ,IAAIlZ,KAiBlB,OAhBKkB,EAAOiY,cACVV,EAAOA,EAAKvX,QAAQ2X,GAAQ,IAAI7Y,KAAK,GAAG6Y,EAAIO,8BAAgCF,KAG1EhY,EAAOmY,WACTZ,EAAOA,EAAKvX,QAAQ2X,GAA4B,MAApBA,EAAIS,eAG9BpY,EAAOqY,YACTd,EAAOA,EAAKvX,QAAQ2X,GAAQA,EAAIW,YAAcC,SAASvY,EAAOqY,cAG5DrY,EAAOwY,SACTjB,EAAOA,EAAKvX,QAAQ2X,GAAqD,YAA5CA,EAAIc,UAAY,UAAUC,iBAGlDnB,CAAI,ECTb,MAAMoB,GAAoB,CACxBR,UAAU,EACVE,UAAW,EACXJ,aAAa,GAoEf,OAjEmBW,KACjB,MAAM,SAAElE,EAAQ,MAAE1R,EAAK,MAAEmT,GLuqE3B,SAAiBnU,EAAQ,CAAC,GACtB,MAAM6W,EAAe,YACd5X,EAAW6X,GAAmB,WAAe,CAChDvK,SAAS,EACTC,cAAc,EACdC,YAAa,CAAC,EACdC,aAAa,EACbC,YAAa,EACbC,cAAe,CAAC,EAChBC,cAAc,EACdC,oBAAoB,EACpB3I,SAAS,EACTzC,OAAQ,CAAC,IAETmV,EAAa3W,QACb2W,EAAa3W,QAAQ6S,QAAQ1G,SAAWrM,EAGxC6W,EAAa3W,QAAU,IAChBiM,GAAkBnM,GACrBf,aAGR,MAAM8T,EAAU8D,EAAa3W,QAAQ6S,QAC/BvS,EAAW,eAAmB3D,IAC5B8C,EAAsB9C,EAAOkW,EAAQ7T,iBAAiB,KACtD6T,EAAQzG,WAAa,IACdyG,EAAQzG,cACRzP,GAEPia,EAAgB,IAAK/D,EAAQzG,aACjC,GACD,CAACyG,IAiBJ,OAhBAhT,EAAa,CACTM,QAAS0S,EAAQvF,UAAUC,MAC3BjN,aAEJ,aAAgB,KACPuS,EAAQ7F,YAAYpH,QACrBiN,EAAQ7T,gBAAgBiF,SAAW4O,EAAQjF,eAC3CiF,EAAQ7F,YAAYpH,OAAQ,GAE5BiN,EAAQ7F,YAAYlM,QACpB+R,EAAQ7F,YAAYlM,OAAQ,EAC5B+R,EAAQvF,UAAUC,MAAMlN,KAAK,CAAC,IAElCwS,EAAQC,kBAAkB,IAE9B6D,EAAa3W,QAAQjB,UAAYD,EAAkBC,EAAW8T,EAAQ7T,iBAC/D2X,EAAa3W,OACxB,CKztEqC6W,GAC7BC,EAAWhW,IAEXuU,EAAOQ,GAAWkB,GAASD,GAEjC,OACExB,EAAAA,cAAA,OAAKC,UAAU,cACbD,EAAAA,cAAA,OAAKC,UAAU,cACbD,EAAAA,cAAA,OAAKC,UAAU,UACbD,EAAAA,cAAA,YACEA,EAAAA,cAAA,OAAKC,UAAU,WAAU,QAIzBD,EAAAA,cAAA,aACEA,EAAAA,cAAA,QAAAnW,OAAA6X,OAAA,CAAOva,KAAK,YAAe+V,EAAS,cAAe,aAGrD8C,EAAAA,cAAA,aACEA,EAAAA,cAAA,QAAAnW,OAAA6X,OAAA,CAAOva,KAAK,YAAe+V,EAAS,iBAAkB,WAKxD8C,EAAAA,cAAA,OAAKC,UAAU,WAAU,eAIzBD,EAAAA,cAAA,aACEA,EAAAA,cAAA,SAAY9C,EAAS,aACnB8C,EAAAA,cAAA,UAAQ3Y,MAAM,KAAI,OAClB2Y,EAAAA,cAAA,UAAQ3Y,MAAM,MAAK,SACnB2Y,EAAAA,cAAA,UAAQ3Y,MAAM,MAAK,SACnB2Y,EAAAA,cAAA,UAAQ3Y,MAAM,MAAK,SACnB2Y,EAAAA,cAAA,UAAQ3Y,MAAM,OAAM,SACb,aAIX2Y,EAAAA,cAAA,OAAKC,UAAU,WAAU,YAGzBD,EAAAA,cAAA,aACEA,EAAAA,cAAA,QAAAnW,OAAA6X,OAAA,CAAOva,KAAK,YAAe+V,EAAS,YAAa,UAInD8C,EAAAA,cAAA,UACE7Y,KAAK,SACL8Y,UAAU,QACV0B,QAASA,IAAMhD,EAAMwC,KACtB,WAKLnB,EAAAA,cAACM,GAAS,OAEZN,EAAAA,cAAC4B,GAAI,CAAC7B,KAAMA,IACR,ECxEK,SAAS8B,KACtB,OACE7B,EAAAA,cAAC8B,EAAAA,EAAI,KACH9B,EAAAA,cAACoB,GAAU,MAGjB,C","sources":["webpack://jobs-board/./node_modules/react-hook-form/dist/index.esm.mjs","webpack://jobs-board/./src/components/Jobs.jsx","webpack://jobs-board/./src/components/HowToPost.jsx","webpack://jobs-board/./src/jobs.js","webpack://jobs-board/./src/filter-jobs.js","webpack://jobs-board/./src/components/JobsFilter.jsx","webpack://jobs-board/./src/pages/index.jsx"],"sourcesContent":["import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) &&\r\n    !Array.isArray(value) &&\r\n    isObjectType(value) &&\r\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\r\n    ? isCheckBoxInput(event.target)\r\n        ? event.target.checked\r\n        : event.target.value\r\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\r\n    if (!path || !isObject(obj)) {\r\n        return defaultValue;\r\n    }\r\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\r\n    return isUndefined(result) || result === obj\r\n        ? isUndefined(obj[path])\r\n            ? defaultValue\r\n            : obj[path]\r\n        : result;\r\n};\n\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    FOCUS_OUT: 'focusout',\r\n    CHANGE: 'change',\r\n};\r\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n    onTouched: 'onTouched',\r\n    all: 'all',\r\n};\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\n\nconst HookFormContext = React.createContext(null);\r\n/**\r\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\r\n *\r\n * @returns return all useForm methods\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const methods = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   return (\r\n *     <FormProvider {...methods} >\r\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n *         <NestedInput />\r\n *         <input type=\"submit\" />\r\n *       </form>\r\n *     </FormProvider>\r\n *   );\r\n * }\r\n *\r\n *  function NestedInput() {\r\n *   const { register } = useFormContext(); // retrieve all hook methods\r\n *   return <input {...register(\"test\")} />;\r\n * }\r\n * ```\r\n */\r\nconst useFormContext = () => React.useContext(HookFormContext);\r\n/**\r\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\r\n *\r\n * @param props - all useFrom methods\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const methods = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   return (\r\n *     <FormProvider {...methods} >\r\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n *         <NestedInput />\r\n *         <input type=\"submit\" />\r\n *       </form>\r\n *     </FormProvider>\r\n *   );\r\n * }\r\n *\r\n *  function NestedInput() {\r\n *   const { register } = useFormContext(); // retrieve all hook methods\r\n *   return <input {...register(\"test\")} />;\r\n * }\r\n * ```\r\n */\r\nconst FormProvider = (props) => {\r\n    const { children, ...data } = props;\r\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\r\n};\n\nvar getProxyFormState = (formState, _proxyFormState, localProxyFormState, isRoot = true) => {\r\n    const result = {};\r\n    for (const key in formState) {\r\n        Object.defineProperty(result, key, {\r\n            get: () => {\r\n                const _key = key;\r\n                if (_proxyFormState[_key] !== VALIDATION_MODE.all) {\r\n                    _proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\r\n                }\r\n                localProxyFormState && (localProxyFormState[_key] = true);\r\n                return formState[_key];\r\n            },\r\n        });\r\n    }\r\n    return result;\r\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, isRoot) => {\r\n    const { name, ...formState } = formStateData;\r\n    return (isEmptyObject(formState) ||\r\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\r\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\r\n            (!isRoot || VALIDATION_MODE.all)));\r\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => exact && signalName\r\n    ? name === signalName\r\n    : !name ||\r\n        !signalName ||\r\n        name === signalName ||\r\n        convertToArrayPayload(name).some((currentName) => currentName &&\r\n            (currentName.startsWith(signalName) ||\r\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\r\n    const _props = React.useRef(props);\r\n    _props.current = props;\r\n    React.useEffect(() => {\r\n        const tearDown = (subscription) => {\r\n            if (subscription) {\r\n                subscription.unsubscribe();\r\n            }\r\n        };\r\n        const subscription = !props.disabled &&\r\n            _props.current.subject.subscribe({\r\n                next: _props.current.callback,\r\n            });\r\n        return () => tearDown(subscription);\r\n    }, [props.disabled]);\r\n}\n\n/**\r\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\r\n *\r\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, handleSubmit, control } = useForm({\r\n *     defaultValues: {\r\n *     firstName: \"firstName\"\r\n *   }});\r\n *   const { dirtyFields } = useFormState({\r\n *     control\r\n *   });\r\n *   const onSubmit = (data) => console.log(data);\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(onSubmit)}>\r\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\r\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useFormState(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, disabled, name, exact } = props || {};\r\n    const [formState, updateFormState] = React.useState(control._formState);\r\n    const _localProxyFormState = React.useRef({\r\n        isDirty: false,\r\n        dirtyFields: false,\r\n        touchedFields: false,\r\n        isValidating: false,\r\n        isValid: false,\r\n        errors: false,\r\n    });\r\n    const _name = React.useRef(name);\r\n    const _mounted = React.useRef(true);\r\n    _name.current = name;\r\n    const callback = React.useCallback((value) => _mounted.current &&\r\n        shouldSubscribeByName(_name.current, value.name, exact) &&\r\n        shouldRenderFormState(value, _localProxyFormState.current) &&\r\n        updateFormState({\r\n            ...control._formState,\r\n            ...value,\r\n        }), [control, exact]);\r\n    useSubscribe({\r\n        disabled,\r\n        callback,\r\n        subject: control._subjects.state,\r\n    });\r\n    React.useEffect(() => {\r\n        _mounted.current = true;\r\n        return () => {\r\n            _mounted.current = false;\r\n        };\r\n    }, []);\r\n    return getProxyFormState(formState, control._proxyFormState, _localProxyFormState.current, false);\r\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal) => {\r\n    const isArray = Array.isArray(names);\r\n    if (isString(names)) {\r\n        isGlobal && _names.watch.add(names);\r\n        return get(formValues, names);\r\n    }\r\n    if (isArray) {\r\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName),\r\n            get(formValues, fieldName)));\r\n    }\r\n    isGlobal && (_names.watchAll = true);\r\n    return formValues;\r\n};\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar objectHasFunction = (data) => {\r\n    for (const key in data) {\r\n        if (isFunction(data[key])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\n\n/**\r\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\r\n *\r\n * @remarks\r\n *\r\n * [API](https://react-hook-form.com/api/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\r\n *\r\n * @example\r\n * ```tsx\r\n * const { watch } = useForm();\r\n * const values = useWatch({\r\n *   name: \"fieldName\"\r\n *   control,\r\n * })\r\n * ```\r\n */\r\nfunction useWatch(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\r\n    const _name = React.useRef(name);\r\n    _name.current = name;\r\n    const callback = React.useCallback((formState) => {\r\n        if (shouldSubscribeByName(_name.current, formState.name, exact)) {\r\n            const fieldValues = generateWatchOutput(_name.current, control._names, formState.values || control._formValues);\r\n            updateValue(isUndefined(_name.current) ||\r\n                (isObject(fieldValues) && !objectHasFunction(fieldValues))\r\n                ? { ...fieldValues }\r\n                : Array.isArray(fieldValues)\r\n                    ? [...fieldValues]\r\n                    : isUndefined(fieldValues)\r\n                        ? defaultValue\r\n                        : fieldValues);\r\n        }\r\n    }, [control, exact, defaultValue]);\r\n    useSubscribe({\r\n        disabled,\r\n        subject: control._subjects.watch,\r\n        callback,\r\n    });\r\n    const [value, updateValue] = React.useState(isUndefined(defaultValue)\r\n        ? control._getWatch(name)\r\n        : defaultValue);\r\n    React.useEffect(() => {\r\n        control._removeUnmounted();\r\n    });\r\n    return value;\r\n}\n\n/**\r\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\r\n *\r\n * @param props - the path name to the form field value, and validation rules.\r\n *\r\n * @returns field properties, field and form state. {@link UseControllerReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function Input(props) {\r\n *   const { field, fieldState, formState } = useController(props);\r\n *   return (\r\n *     <div>\r\n *       <input {...field} placeholder={props.name} />\r\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\r\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\r\n *     </div>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useController(props) {\r\n    const methods = useFormContext();\r\n    const { name, control = methods.control, shouldUnregister } = props;\r\n    const isArrayField = isNameInFieldArray(control._names.array, name);\r\n    const value = useWatch({\r\n        control,\r\n        name,\r\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\r\n        exact: true,\r\n    });\r\n    const formState = useFormState({\r\n        control,\r\n        name,\r\n    });\r\n    const _registerProps = React.useRef(control.register(name, {\r\n        ...props.rules,\r\n        value,\r\n    }));\r\n    React.useEffect(() => {\r\n        const updateMounted = (name, value) => {\r\n            const field = get(control._fields, name);\r\n            if (field) {\r\n                field._f.mount = value;\r\n            }\r\n        };\r\n        updateMounted(name, true);\r\n        return () => {\r\n            const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\r\n            (isArrayField\r\n                ? _shouldUnregisterField && !control._stateFlags.action\r\n                : _shouldUnregisterField)\r\n                ? control.unregister(name)\r\n                : updateMounted(name, false);\r\n        };\r\n    }, [name, control, isArrayField, shouldUnregister]);\r\n    return {\r\n        field: {\r\n            name,\r\n            value,\r\n            onChange: React.useCallback((event) => {\r\n                _registerProps.current.onChange({\r\n                    target: {\r\n                        value: getEventValue(event),\r\n                        name: name,\r\n                    },\r\n                    type: EVENTS.CHANGE,\r\n                });\r\n            }, [name]),\r\n            onBlur: React.useCallback(() => {\r\n                _registerProps.current.onBlur({\r\n                    target: {\r\n                        value: get(control._formValues, name),\r\n                        name: name,\r\n                    },\r\n                    type: EVENTS.BLUR,\r\n                });\r\n            }, [name, control]),\r\n            ref: React.useCallback((elm) => {\r\n                const field = get(control._fields, name);\r\n                if (elm && field && elm.focus) {\r\n                    field._f.ref = {\r\n                        focus: () => elm.focus(),\r\n                        select: () => elm.select(),\r\n                        setCustomValidity: (message) => elm.setCustomValidity(message),\r\n                        reportValidity: () => elm.reportValidity(),\r\n                    };\r\n                }\r\n            }, [name, control._fields]),\r\n        },\r\n        formState,\r\n        fieldState: Object.defineProperties({}, {\r\n            invalid: {\r\n                get: () => !!get(formState.errors, name),\r\n            },\r\n            isDirty: {\r\n                get: () => !!get(formState.dirtyFields, name),\r\n            },\r\n            isTouched: {\r\n                get: () => !!get(formState.touchedFields, name),\r\n            },\r\n            error: {\r\n                get: () => get(formState.errors, name),\r\n            },\r\n        }),\r\n    };\r\n}\n\n/**\r\n * Component based on `useController` hook to work with controlled component.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\r\n *\r\n * @param props - the path name to the form field value, and validation rules.\r\n *\r\n * @returns provide field handler functions, field and form state.\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { control } = useForm<FormValues>({\r\n *     defaultValues: {\r\n *       test: \"\"\r\n *     }\r\n *   });\r\n *\r\n *   return (\r\n *     <form>\r\n *       <Controller\r\n *         control={control}\r\n *         name=\"test\"\r\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\r\n *           <>\r\n *             <input\r\n *               onChange={onChange} // send value to hook form\r\n *               onBlur={onBlur} // notify when input is touched\r\n *               value={value} // return updated value\r\n *               ref={ref} // set ref for focus management\r\n *             />\r\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\r\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\r\n *           </>\r\n *         )}\r\n *       />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nconst Controller = (props) => props.render(useController(props));\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\r\n    ? {\r\n        ...errors[name],\r\n        types: {\r\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\r\n            [type]: message || true,\r\n        },\r\n    }\r\n    : {};\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || Array.isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(+tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nconst focusFieldBy = (fields, callback, fieldsNames) => {\r\n    for (const key of fieldsNames || Object.keys(fields)) {\r\n        const field = get(fields, key);\r\n        if (field) {\r\n            const { _f, ...currentField } = field;\r\n            if (_f && callback(_f.name)) {\r\n                if (_f.ref.focus && isUndefined(_f.ref.focus())) {\r\n                    break;\r\n                }\r\n                else if (_f.refs) {\r\n                    _f.refs[0].focus();\r\n                    break;\r\n                }\r\n            }\r\n            else if (isObject(currentField)) {\r\n                focusFieldBy(currentField, callback);\r\n            }\r\n        }\r\n    }\r\n};\n\nvar generateId = () => {\r\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\r\n    ? options.focusName ||\r\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\r\n    : '';\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\r\n    (_names.watchAll ||\r\n        _names.watch.has(name) ||\r\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\r\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nvar updateFieldArrayRootError = (errors, error, name) => {\r\n    const fieldArrayErrors = compact(get(errors, name));\r\n    set(fieldArrayErrors, 'root', error[name]);\r\n    set(errors, name, fieldArrayErrors);\r\n    return errors;\r\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isMessage = (value) => isString(value) || React.isValidElement(value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRegex = (value) => value instanceof RegExp;\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (Array.isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter((option) => option && option.checked && !option.disabled)\r\n                .map((option) => option.value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        return options[0].checked && !options[0].disabled\r\n            ? // @ts-expect-error expected to work in the browser\r\n                options[0].attributes && !isUndefined(options[0].attributes.value)\r\n                    ? isUndefined(options[0].value) || options[0].value === ''\r\n                        ? validResult\r\n                        : { value: options[0].value, isValid: true }\r\n                    : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: null,\r\n};\r\nvar getRadioValue = (options) => Array.isArray(options)\r\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\r\n        ? {\r\n            isValid: true,\r\n            value: option.value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    if (isMessage(result) ||\r\n        (Array.isArray(result) && result.every(isMessage)) ||\r\n        (isBoolean(result) && !result)) {\r\n        return {\r\n            type,\r\n            message: isMessage(result) ? result : '',\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\r\n    ? validationData\r\n    : {\r\n        value: validationData,\r\n        message: '',\r\n    };\n\nvar validateField = async (field, inputValue, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\r\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, } = field._f;\r\n    if (!mount || disabled) {\r\n        return {};\r\n    }\r\n    const inputRef = refs ? refs[0] : ref;\r\n    const setCustomValidity = (message) => {\r\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\r\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\r\n            inputRef.reportValidity();\r\n        }\r\n    };\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\r\n        inputValue === '' ||\r\n        (Array.isArray(inputValue) && !inputValue.length);\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = {\r\n            type: exceedMax ? maxType : minType,\r\n            message,\r\n            ref,\r\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\r\n        };\r\n    };\r\n    if (isFieldArray\r\n        ? !Array.isArray(inputValue) || !inputValue.length\r\n        : required &&\r\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\r\n                (isBoolean(inputValue) && !inputValue) ||\r\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\r\n                (isRadio && !getRadioValue(refs).isValid))) {\r\n        const { value, message } = isMessage(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (value) {\r\n            error[name] = {\r\n                type: INPUT_VALIDATION_RULES.required,\r\n                message,\r\n                ref: inputRef,\r\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\r\n            };\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const maxOutput = getValueAndMessage(max);\r\n        const minOutput = getValueAndMessage(min);\r\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\r\n            const valueNumber = ref.valueAsNumber || +inputValue;\r\n            if (!isNullOrUndefined(maxOutput.value)) {\r\n                exceedMax = valueNumber > maxOutput.value;\r\n            }\r\n            if (!isNullOrUndefined(minOutput.value)) {\r\n                exceedMin = valueNumber < minOutput.value;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(inputValue);\r\n            if (isString(maxOutput.value)) {\r\n                exceedMax = valueDate > new Date(maxOutput.value);\r\n            }\r\n            if (isString(minOutput.value)) {\r\n                exceedMin = valueDate < new Date(minOutput.value);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(error[name].message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if ((maxLength || minLength) &&\r\n        !isEmpty &&\r\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\r\n        const maxLengthOutput = getValueAndMessage(maxLength);\r\n        const minLengthOutput = getValueAndMessage(minLength);\r\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\r\n            inputValue.length > maxLengthOutput.value;\r\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\r\n            inputValue.length < minLengthOutput.value;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(error[name].message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty && isString(inputValue)) {\r\n        const { value: patternValue, message } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\r\n            error[name] = {\r\n                type: INPUT_VALIDATION_RULES.pattern,\r\n                message,\r\n                ref,\r\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\r\n            };\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        if (isFunction(validate)) {\r\n            const result = await validate(inputValue);\r\n            const validateError = getValidateError(result, inputRef);\r\n            if (validateError) {\r\n                error[name] = {\r\n                    ...validateError,\r\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\r\n                };\r\n                if (!validateAllFieldCriteria) {\r\n                    setCustomValidity(validateError.message);\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            let validationResult = {};\r\n            for (const key in validate) {\r\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\r\n                    break;\r\n                }\r\n                const validateError = getValidateError(await validate[key](inputValue), inputRef, key);\r\n                if (validateError) {\r\n                    validationResult = {\r\n                        ...validateError,\r\n                        ...appendErrorsCurry(key, validateError.message),\r\n                    };\r\n                    setCustomValidity(validateError.message);\r\n                    if (validateAllFieldCriteria) {\r\n                        error[name] = validationResult;\r\n                    }\r\n                }\r\n            }\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = {\r\n                    ref: inputRef,\r\n                    ...validationResult,\r\n                };\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    setCustomValidity(true);\r\n    return error;\r\n};\n\nfunction append(data, value) {\r\n    return [...data, ...convertToArrayPayload(value)];\r\n}\n\nvar isWeb = typeof window !== 'undefined' &&\r\n    typeof window.HTMLElement !== 'undefined' &&\r\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\r\n    let copy;\r\n    const isArray = Array.isArray(data);\r\n    if (data instanceof Date) {\r\n        copy = new Date(data);\r\n    }\r\n    else if (data instanceof Set) {\r\n        copy = new Set(data);\r\n    }\r\n    else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) &&\r\n        (isArray || isObject(data))) {\r\n        copy = isArray ? [] : {};\r\n        for (const key in data) {\r\n            if (isFunction(data[key])) {\r\n                copy = data;\r\n                break;\r\n            }\r\n            copy[key] = cloneObject(data[key]);\r\n        }\r\n    }\r\n    else {\r\n        return data;\r\n    }\r\n    return copy;\r\n}\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nvar getValidationModes = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n    isOnAll: mode === VALIDATION_MODE.all,\r\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\r\n});\n\nfunction insert(data, index, value) {\r\n    return [\r\n        ...data.slice(0, index),\r\n        ...convertToArrayPayload(value),\r\n        ...data.slice(index),\r\n    ];\r\n}\n\nvar moveArrayAt = (data, from, to) => {\r\n    if (!Array.isArray(data)) {\r\n        return [];\r\n    }\r\n    if (isUndefined(data[to])) {\r\n        data[to] = undefined;\r\n    }\r\n    data.splice(to, 0, data.splice(from, 1)[0]);\r\n    return data;\r\n};\n\nfunction prepend(data, value) {\r\n    return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\r\n}\n\nfunction removeAtIndexes(data, indexes) {\r\n    let i = 0;\r\n    const temp = [...data];\r\n    for (const index of indexes) {\r\n        temp.splice(index - i, 1);\r\n        i++;\r\n    }\r\n    return compact(temp).length ? temp : [];\r\n}\r\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\r\n    data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\r\n};\n\nfunction baseGet(object, updatePath) {\r\n    const length = updatePath.slice(0, -1).length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return object;\r\n}\r\nfunction isEmptyArray(obj) {\r\n    for (const key in obj) {\r\n        if (!isUndefined(obj[key])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction unset(object, path) {\r\n    const updatePath = isKey(path) ? [path] : stringToPath(path);\r\n    const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\r\n    const key = updatePath[updatePath.length - 1];\r\n    let previousObjRef;\r\n    if (childObject) {\r\n        delete childObject[key];\r\n    }\r\n    for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\r\n        let index = -1;\r\n        let objectRef;\r\n        const currentPaths = updatePath.slice(0, -(k + 1));\r\n        const currentPathsLength = currentPaths.length - 1;\r\n        if (k > 0) {\r\n            previousObjRef = object;\r\n        }\r\n        while (++index < currentPaths.length) {\r\n            const item = currentPaths[index];\r\n            objectRef = objectRef ? objectRef[item] : object[item];\r\n            if (currentPathsLength === index &&\r\n                ((isObject(objectRef) && isEmptyObject(objectRef)) ||\r\n                    (Array.isArray(objectRef) && isEmptyArray(objectRef)))) {\r\n                previousObjRef ? delete previousObjRef[item] : delete object[item];\r\n            }\r\n            previousObjRef = objectRef;\r\n        }\r\n    }\r\n    return object;\r\n}\n\nvar updateAt = (fieldValues, index, value) => {\r\n    fieldValues[index] = value;\r\n    return fieldValues;\r\n};\n\n/**\r\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\r\n *\r\n * @param props - useFieldArray props\r\n *\r\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\r\n *     defaultValues: {\r\n *       test: []\r\n *     }\r\n *   });\r\n *   const { fields, append } = useFieldArray({\r\n *     control,\r\n *     name: \"test\"\r\n *   });\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\r\n *       {fields.map((item, index) => (\r\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\r\n *       ))}\r\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\r\n *         append\r\n *       </button>\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useFieldArray(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, } = props;\r\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\r\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\r\n    const _fieldIds = React.useRef(fields);\r\n    const _name = React.useRef(name);\r\n    const _actioned = React.useRef(false);\r\n    _name.current = name;\r\n    _fieldIds.current = fields;\r\n    control._names.array.add(name);\r\n    props.rules &&\r\n        control.register(name, props.rules);\r\n    const callback = React.useCallback(({ values, name: fieldArrayName, }) => {\r\n        if (fieldArrayName === _name.current || !fieldArrayName) {\r\n            const fieldValues = get(values, _name.current, []);\r\n            setFields(fieldValues);\r\n            ids.current = fieldValues.map(generateId);\r\n        }\r\n    }, []);\r\n    useSubscribe({\r\n        callback,\r\n        subject: control._subjects.array,\r\n    });\r\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\r\n        _actioned.current = true;\r\n        control._updateFieldArray(name, updatedFieldArrayValues);\r\n    }, [control, name]);\r\n    const append$1 = (value, options) => {\r\n        const appendValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = append(control._getFieldArray(name), appendValue);\r\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\r\n        ids.current = append(ids.current, appendValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, append, {\r\n            argA: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const prepend$1 = (value, options) => {\r\n        const prependValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = prepend(control._getFieldArray(name), prependValue);\r\n        control._names.focus = getFocusFieldName(name, 0, options);\r\n        ids.current = prepend(ids.current, prependValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, prepend, {\r\n            argA: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const remove = (index) => {\r\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\r\n        ids.current = removeArrayAt(ids.current, index);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\r\n            argA: index,\r\n        });\r\n    };\r\n    const insert$1 = (index, value, options) => {\r\n        const insertValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\r\n        control._names.focus = getFocusFieldName(name, index, options);\r\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\r\n            argA: index,\r\n            argB: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        const updatedFieldArrayValues = control._getFieldArray(name);\r\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\r\n        swapArrayAt(ids.current, indexA, indexB);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\r\n            argA: indexA,\r\n            argB: indexB,\r\n        }, false);\r\n    };\r\n    const move = (from, to) => {\r\n        const updatedFieldArrayValues = control._getFieldArray(name);\r\n        moveArrayAt(updatedFieldArrayValues, from, to);\r\n        moveArrayAt(ids.current, from, to);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\r\n            argA: from,\r\n            argB: to,\r\n        }, false);\r\n    };\r\n    const update = (index, value) => {\r\n        const updateValue = cloneObject(value);\r\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\r\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields([...updatedFieldArrayValues]);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\r\n            argA: index,\r\n            argB: updateValue,\r\n        }, true, false);\r\n    };\r\n    const replace = (value) => {\r\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\r\n        ids.current = updatedFieldArrayValues.map(generateId);\r\n        updateValues([...updatedFieldArrayValues]);\r\n        setFields([...updatedFieldArrayValues]);\r\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\r\n    };\r\n    React.useEffect(() => {\r\n        control._stateFlags.action = false;\r\n        isWatched(name, control._names) && control._subjects.state.next({});\r\n        if (_actioned.current) {\r\n            if (control._options.resolver) {\r\n                control._executeSchema([name]).then((result) => {\r\n                    const error = get(result.errors, name);\r\n                    const existingError = get(control._formState.errors, name);\r\n                    if (existingError ? !error && existingError.type : error && error.type) {\r\n                        error\r\n                            ? set(control._formState.errors, name, error)\r\n                            : unset(control._formState.errors, name);\r\n                        control._subjects.state.next({\r\n                            errors: control._formState.errors,\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                const field = get(control._fields, name);\r\n                const validationModeBeforeSubmit = getValidationModes(control._options.mode);\r\n                if ((!validationModeBeforeSubmit.isOnSubmit ||\r\n                    control._formState.isSubmitted) &&\r\n                    field &&\r\n                    field._f) {\r\n                    validateField(field, get(control._formValues, name), control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\r\n                        control._subjects.state.next({\r\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\r\n                        }));\r\n                }\r\n            }\r\n        }\r\n        control._subjects.watch.next({\r\n            name,\r\n            values: control._formValues,\r\n        });\r\n        control._names.focus &&\r\n            focusFieldBy(control._fields, (key) => key.startsWith(control._names.focus));\r\n        control._names.focus = '';\r\n        control._proxyFormState.isValid && control._updateValid();\r\n    }, [fields, name, control]);\r\n    React.useEffect(() => {\r\n        !get(control._formValues, name) && control._updateFieldArray(name);\r\n        return () => {\r\n            (control._options.shouldUnregister || shouldUnregister) &&\r\n                control.unregister(name);\r\n        };\r\n    }, [name, control, keyName, shouldUnregister]);\r\n    return {\r\n        swap: React.useCallback(swap, [updateValues, name, control]),\r\n        move: React.useCallback(move, [updateValues, name, control]),\r\n        prepend: React.useCallback(prepend$1, [updateValues, name, control]),\r\n        append: React.useCallback(append$1, [updateValues, name, control]),\r\n        remove: React.useCallback(remove, [updateValues, name, control]),\r\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\r\n        update: React.useCallback(update, [updateValues, name, control]),\r\n        replace: React.useCallback(replace, [updateValues, name, control]),\r\n        fields: React.useMemo(() => fields.map((field, index) => ({\r\n            ...field,\r\n            [keyName]: ids.current[index] || generateId(),\r\n        })), [fields, keyName]),\r\n    };\r\n}\n\nfunction createSubject() {\r\n    let _observers = [];\r\n    const next = (value) => {\r\n        for (const observer of _observers) {\r\n            observer.next(value);\r\n        }\r\n    };\r\n    const subscribe = (observer) => {\r\n        _observers.push(observer);\r\n        return {\r\n            unsubscribe: () => {\r\n                _observers = _observers.filter((o) => o !== observer);\r\n            },\r\n        };\r\n    };\r\n    const unsubscribe = () => {\r\n        _observers = [];\r\n    };\r\n    return {\r\n        get observers() {\r\n            return _observers;\r\n        },\r\n        next,\r\n        subscribe,\r\n        unsubscribe,\r\n    };\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\r\n    if (isPrimitive(object1) || isPrimitive(object2)) {\r\n        return object1 === object2;\r\n    }\r\n    if (isDateObject(object1) && isDateObject(object2)) {\r\n        return object1.getTime() === object2.getTime();\r\n    }\r\n    const keys1 = Object.keys(object1);\r\n    const keys2 = Object.keys(object2);\r\n    if (keys1.length !== keys2.length) {\r\n        return false;\r\n    }\r\n    for (const key of keys1) {\r\n        const val1 = object1[key];\r\n        if (!keys2.includes(key)) {\r\n            return false;\r\n        }\r\n        if (key !== 'ref') {\r\n            const val2 = object2[key];\r\n            if ((isDateObject(val1) && isDateObject(val2)) ||\r\n                (isObject(val1) && isObject(val2)) ||\r\n                (Array.isArray(val1) && Array.isArray(val2))\r\n                ? !deepEqual(val1, val2)\r\n                : val1 !== val2) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\n\nvar isHTMLElement = (value) => {\r\n    const owner = value ? value.ownerDocument : 0;\r\n    const ElementClass = owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement;\r\n    return value instanceof ElementClass;\r\n};\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nfunction markFieldsDirty(data, fields = {}) {\r\n    const isParentNodeArray = Array.isArray(data);\r\n    if (isObject(data) || isParentNodeArray) {\r\n        for (const key in data) {\r\n            if (Array.isArray(data[key]) ||\r\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\r\n                fields[key] = Array.isArray(data[key]) ? [] : {};\r\n                markFieldsDirty(data[key], fields[key]);\r\n            }\r\n            else if (!isNullOrUndefined(data[key])) {\r\n                fields[key] = true;\r\n            }\r\n        }\r\n    }\r\n    return fields;\r\n}\r\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\r\n    const isParentNodeArray = Array.isArray(data);\r\n    if (isObject(data) || isParentNodeArray) {\r\n        for (const key in data) {\r\n            if (Array.isArray(data[key]) ||\r\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\r\n                if (isUndefined(formValues) ||\r\n                    isPrimitive(dirtyFieldsFromValues[key])) {\r\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\r\n                        ? markFieldsDirty(data[key], [])\r\n                        : { ...markFieldsDirty(data[key]) };\r\n                }\r\n                else {\r\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\r\n                }\r\n            }\r\n            else {\r\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\r\n            }\r\n        }\r\n    }\r\n    return dirtyFieldsFromValues;\r\n}\r\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\r\n    ? value\r\n    : valueAsNumber\r\n        ? value === '' || isNullOrUndefined(value)\r\n            ? NaN\r\n            : +value\r\n        : valueAsDate && isString(value)\r\n            ? new Date(value)\r\n            : setValueAs\r\n                ? setValueAs(value)\r\n                : value;\n\nfunction getFieldValue(_f) {\r\n    const ref = _f.ref;\r\n    if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\r\n        return;\r\n    }\r\n    if (isFileInput(ref)) {\r\n        return ref.files;\r\n    }\r\n    if (isRadioInput(ref)) {\r\n        return getRadioValue(_f.refs).value;\r\n    }\r\n    if (isMultipleSelect(ref)) {\r\n        return [...ref.selectedOptions].map(({ value }) => value);\r\n    }\r\n    if (isCheckBoxInput(ref)) {\r\n        return getCheckboxValue(_f.refs).value;\r\n    }\r\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\r\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\r\n    const fields = {};\r\n    for (const name of fieldsNames) {\r\n        const field = get(_fields, name);\r\n        field && set(fields, name, field._f);\r\n    }\r\n    return {\r\n        criteriaMode,\r\n        names: [...fieldsNames],\r\n        fields,\r\n        shouldUseNativeValidation,\r\n    };\r\n};\n\nvar getRuleValue = (rule) => isUndefined(rule)\r\n    ? undefined\r\n    : isRegex(rule)\r\n        ? rule.source\r\n        : isObject(rule)\r\n            ? isRegex(rule.value)\r\n                ? rule.value.source\r\n                : rule.value\r\n            : rule;\n\nvar hasValidation = (options) => options.mount &&\r\n    (options.required ||\r\n        options.min ||\r\n        options.max ||\r\n        options.maxLength ||\r\n        options.minLength ||\r\n        options.pattern ||\r\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\r\n    const error = get(errors, name);\r\n    if (error || isKey(name)) {\r\n        return {\r\n            error,\r\n            name,\r\n        };\r\n    }\r\n    const names = name.split('.');\r\n    while (names.length) {\r\n        const fieldName = names.join('.');\r\n        const field = get(_fields, fieldName);\r\n        const foundError = get(errors, fieldName);\r\n        if (field && !Array.isArray(field) && name !== fieldName) {\r\n            return { name };\r\n        }\r\n        if (foundError && foundError.type) {\r\n            return {\r\n                name: fieldName,\r\n                error: foundError,\r\n            };\r\n        }\r\n        names.pop();\r\n    }\r\n    return {\r\n        name,\r\n    };\r\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\r\n    if (mode.isOnAll) {\r\n        return false;\r\n    }\r\n    else if (!isSubmitted && mode.isOnTouch) {\r\n        return !(isTouched || isBlurEvent);\r\n    }\r\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\r\n        return !isBlurEvent;\r\n    }\r\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\r\n        return isBlurEvent;\r\n    }\r\n    return true;\r\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\r\n    mode: VALIDATION_MODE.onSubmit,\r\n    reValidateMode: VALIDATION_MODE.onChange,\r\n    shouldFocusError: true,\r\n};\r\nfunction createFormControl(props = {}) {\r\n    let _options = {\r\n        ...defaultOptions,\r\n        ...props,\r\n    };\r\n    let _formState = {\r\n        isDirty: false,\r\n        isValidating: false,\r\n        dirtyFields: {},\r\n        isSubmitted: false,\r\n        submitCount: 0,\r\n        touchedFields: {},\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: false,\r\n        errors: {},\r\n    };\r\n    let _fields = {};\r\n    let _defaultValues = cloneObject(_options.defaultValues) || {};\r\n    let _formValues = _options.shouldUnregister\r\n        ? {}\r\n        : cloneObject(_defaultValues);\r\n    let _stateFlags = {\r\n        action: false,\r\n        mount: false,\r\n        watch: false,\r\n    };\r\n    let _names = {\r\n        mount: new Set(),\r\n        unMount: new Set(),\r\n        array: new Set(),\r\n        watch: new Set(),\r\n    };\r\n    let delayErrorCallback;\r\n    let timer = 0;\r\n    let validateFields = {};\r\n    const _proxyFormState = {\r\n        isDirty: false,\r\n        dirtyFields: false,\r\n        touchedFields: false,\r\n        isValidating: false,\r\n        isValid: false,\r\n        errors: false,\r\n    };\r\n    const _subjects = {\r\n        watch: createSubject(),\r\n        array: createSubject(),\r\n        state: createSubject(),\r\n    };\r\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\r\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\r\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\r\n    const debounce = (callback) => (wait) => {\r\n        clearTimeout(timer);\r\n        timer = window.setTimeout(callback, wait);\r\n    };\r\n    const _updateValid = async (shouldSkipRender) => {\r\n        let isValid = false;\r\n        if (_proxyFormState.isValid) {\r\n            isValid = _options.resolver\r\n                ? isEmptyObject((await _executeSchema()).errors)\r\n                : await executeBuiltInValidation(_fields, true);\r\n            if (!shouldSkipRender && isValid !== _formState.isValid) {\r\n                _formState.isValid = isValid;\r\n                _subjects.state.next({\r\n                    isValid,\r\n                });\r\n            }\r\n        }\r\n        return isValid;\r\n    };\r\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\r\n        if (args && method) {\r\n            _stateFlags.action = true;\r\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\r\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\r\n                shouldSetValues && set(_fields, name, fieldValues);\r\n            }\r\n            if (_proxyFormState.errors &&\r\n                shouldUpdateFieldsAndState &&\r\n                Array.isArray(get(_formState.errors, name))) {\r\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\r\n                shouldSetValues && set(_formState.errors, name, errors);\r\n                unsetEmptyArray(_formState.errors, name);\r\n            }\r\n            if (_proxyFormState.touchedFields &&\r\n                shouldUpdateFieldsAndState &&\r\n                Array.isArray(get(_formState.touchedFields, name))) {\r\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\r\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\r\n            }\r\n            if (_proxyFormState.dirtyFields) {\r\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\r\n            }\r\n            _subjects.state.next({\r\n                isDirty: _getDirty(name, values),\r\n                dirtyFields: _formState.dirtyFields,\r\n                errors: _formState.errors,\r\n                isValid: _formState.isValid,\r\n            });\r\n        }\r\n        else {\r\n            set(_formValues, name, values);\r\n        }\r\n    };\r\n    const updateErrors = (name, error) => {\r\n        set(_formState.errors, name, error);\r\n        _subjects.state.next({\r\n            errors: _formState.errors,\r\n        });\r\n    };\r\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\r\n        const field = get(_fields, name);\r\n        if (field) {\r\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\r\n            isUndefined(defaultValue) ||\r\n                (ref && ref.defaultChecked) ||\r\n                shouldSkipSetValueAs\r\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\r\n                : setFieldValue(name, defaultValue);\r\n            _stateFlags.mount && _updateValid();\r\n        }\r\n    };\r\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\r\n        let isFieldDirty = false;\r\n        const output = {\r\n            name,\r\n        };\r\n        const isPreviousFieldTouched = get(_formState.touchedFields, name);\r\n        if (_proxyFormState.isDirty) {\r\n            const isPreviousFormDirty = _formState.isDirty;\r\n            _formState.isDirty = output.isDirty = _getDirty();\r\n            isFieldDirty = isPreviousFormDirty !== output.isDirty;\r\n        }\r\n        if (_proxyFormState.dirtyFields && (!isBlurEvent || shouldDirty)) {\r\n            const isPreviousFieldDirty = get(_formState.dirtyFields, name);\r\n            const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\r\n            isCurrentFieldPristine\r\n                ? unset(_formState.dirtyFields, name)\r\n                : set(_formState.dirtyFields, name, true);\r\n            output.dirtyFields = _formState.dirtyFields;\r\n            isFieldDirty =\r\n                isFieldDirty ||\r\n                    isPreviousFieldDirty !== get(_formState.dirtyFields, name);\r\n        }\r\n        if (isBlurEvent && !isPreviousFieldTouched) {\r\n            set(_formState.touchedFields, name, isBlurEvent);\r\n            output.touchedFields = _formState.touchedFields;\r\n            isFieldDirty =\r\n                isFieldDirty ||\r\n                    (_proxyFormState.touchedFields &&\r\n                        isPreviousFieldTouched !== isBlurEvent);\r\n        }\r\n        isFieldDirty && shouldRender && _subjects.state.next(output);\r\n        return isFieldDirty ? output : {};\r\n    };\r\n    const shouldRenderByError = async (name, isValid, error, fieldState) => {\r\n        const previousFieldError = get(_formState.errors, name);\r\n        const shouldUpdateValid = _proxyFormState.isValid && _formState.isValid !== isValid;\r\n        if (props.delayError && error) {\r\n            delayErrorCallback = debounce(() => updateErrors(name, error));\r\n            delayErrorCallback(props.delayError);\r\n        }\r\n        else {\r\n            clearTimeout(timer);\r\n            delayErrorCallback = null;\r\n            error\r\n                ? set(_formState.errors, name, error)\r\n                : unset(_formState.errors, name);\r\n        }\r\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\r\n            !isEmptyObject(fieldState) ||\r\n            shouldUpdateValid) {\r\n            const updatedFormState = {\r\n                ...fieldState,\r\n                ...(shouldUpdateValid ? { isValid } : {}),\r\n                errors: _formState.errors,\r\n                name,\r\n            };\r\n            _formState = {\r\n                ..._formState,\r\n                ...updatedFormState,\r\n            };\r\n            _subjects.state.next(updatedFormState);\r\n        }\r\n        validateFields[name]--;\r\n        if (_proxyFormState.isValidating &&\r\n            !Object.values(validateFields).some((v) => v)) {\r\n            _subjects.state.next({\r\n                isValidating: false,\r\n            });\r\n            validateFields = {};\r\n        }\r\n    };\r\n    const _executeSchema = async (name) => _options.resolver\r\n        ? await _options.resolver({ ..._formValues }, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation))\r\n        : {};\r\n    const executeSchemaAndUpdateState = async (names) => {\r\n        const { errors } = await _executeSchema();\r\n        if (names) {\r\n            for (const name of names) {\r\n                const error = get(errors, name);\r\n                error\r\n                    ? set(_formState.errors, name, error)\r\n                    : unset(_formState.errors, name);\r\n            }\r\n        }\r\n        else {\r\n            _formState.errors = errors;\r\n        }\r\n        return errors;\r\n    };\r\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\r\n        valid: true,\r\n    }) => {\r\n        for (const name in fields) {\r\n            const field = fields[name];\r\n            if (field) {\r\n                const { _f, ...fieldValue } = field;\r\n                if (_f) {\r\n                    const isFieldArrayRoot = _names.array.has(_f.name);\r\n                    const fieldError = await validateField(field, get(_formValues, _f.name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation, isFieldArrayRoot);\r\n                    if (fieldError[_f.name]) {\r\n                        context.valid = false;\r\n                        if (shouldOnlyCheckValid) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    !shouldOnlyCheckValid &&\r\n                        (get(fieldError, _f.name)\r\n                            ? isFieldArrayRoot\r\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\r\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\r\n                            : unset(_formState.errors, _f.name));\r\n                }\r\n                fieldValue &&\r\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\r\n            }\r\n        }\r\n        return context.valid;\r\n    };\r\n    const _removeUnmounted = () => {\r\n        for (const name of _names.unMount) {\r\n            const field = get(_fields, name);\r\n            field &&\r\n                (field._f.refs\r\n                    ? field._f.refs.every((ref) => !live(ref))\r\n                    : !live(field._f.ref)) &&\r\n                unregister(name);\r\n        }\r\n        _names.unMount = new Set();\r\n    };\r\n    const _getDirty = (name, data) => (name && data && set(_formValues, name, data),\r\n        !deepEqual(getValues(), _defaultValues));\r\n    const _getWatch = (names, defaultValue, isGlobal) => {\r\n        const fieldValues = {\r\n            ...(_stateFlags.mount\r\n                ? _formValues\r\n                : isUndefined(defaultValue)\r\n                    ? _defaultValues\r\n                    : isString(names)\r\n                        ? { [names]: defaultValue }\r\n                        : defaultValue),\r\n        };\r\n        return generateWatchOutput(names, _names, fieldValues, isGlobal);\r\n    };\r\n    const _getFieldArray = (name) => compact(get(_stateFlags.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\r\n    const setFieldValue = (name, value, options = {}) => {\r\n        const field = get(_fields, name);\r\n        let fieldValue = value;\r\n        if (field) {\r\n            const fieldReference = field._f;\r\n            if (fieldReference) {\r\n                !fieldReference.disabled &&\r\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\r\n                fieldValue =\r\n                    isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\r\n                        ? ''\r\n                        : value;\r\n                if (isMultipleSelect(fieldReference.ref)) {\r\n                    [...fieldReference.ref.options].forEach((selectRef) => (selectRef.selected = fieldValue.includes(selectRef.value)));\r\n                }\r\n                else if (fieldReference.refs) {\r\n                    if (isCheckBoxInput(fieldReference.ref)) {\r\n                        fieldReference.refs.length > 1\r\n                            ? fieldReference.refs.forEach((checkboxRef) => !checkboxRef.disabled &&\r\n                                (checkboxRef.checked = Array.isArray(fieldValue)\r\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\r\n                                    : fieldValue === checkboxRef.value))\r\n                            : fieldReference.refs[0] &&\r\n                                (fieldReference.refs[0].checked = !!fieldValue);\r\n                    }\r\n                    else {\r\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\r\n                    }\r\n                }\r\n                else if (isFileInput(fieldReference.ref)) {\r\n                    fieldReference.ref.value = '';\r\n                }\r\n                else {\r\n                    fieldReference.ref.value = fieldValue;\r\n                    if (!fieldReference.ref.type) {\r\n                        _subjects.watch.next({\r\n                            name,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        (options.shouldDirty || options.shouldTouch) &&\r\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\r\n        options.shouldValidate && trigger(name);\r\n    };\r\n    const setValues = (name, value, options) => {\r\n        for (const fieldKey in value) {\r\n            const fieldValue = value[fieldKey];\r\n            const fieldName = `${name}.${fieldKey}`;\r\n            const field = get(_fields, fieldName);\r\n            (_names.array.has(name) ||\r\n                !isPrimitive(fieldValue) ||\r\n                (field && !field._f)) &&\r\n                !isDateObject(fieldValue)\r\n                ? setValues(fieldName, fieldValue, options)\r\n                : setFieldValue(fieldName, fieldValue, options);\r\n        }\r\n    };\r\n    const setValue = (name, value, options = {}) => {\r\n        const field = get(_fields, name);\r\n        const isFieldArray = _names.array.has(name);\r\n        const cloneValue = cloneObject(value);\r\n        set(_formValues, name, cloneValue);\r\n        if (isFieldArray) {\r\n            _subjects.array.next({\r\n                name,\r\n                values: _formValues,\r\n            });\r\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\r\n                options.shouldDirty) {\r\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\r\n                _subjects.state.next({\r\n                    name,\r\n                    dirtyFields: _formState.dirtyFields,\r\n                    isDirty: _getDirty(name, cloneValue),\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            field && !field._f && !isNullOrUndefined(cloneValue)\r\n                ? setValues(name, cloneValue, options)\r\n                : setFieldValue(name, cloneValue, options);\r\n        }\r\n        isWatched(name, _names) && _subjects.state.next({});\r\n        _subjects.watch.next({\r\n            name,\r\n        });\r\n    };\r\n    const onChange = async (event) => {\r\n        const target = event.target;\r\n        let name = target.name;\r\n        const field = get(_fields, name);\r\n        if (field) {\r\n            let error;\r\n            let isValid;\r\n            const fieldValue = target.type\r\n                ? getFieldValue(field._f)\r\n                : getEventValue(event);\r\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\r\n            const shouldSkipValidation = (!hasValidation(field._f) &&\r\n                !_options.resolver &&\r\n                !get(_formState.errors, name) &&\r\n                !field._f.deps) ||\r\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\r\n            const watched = isWatched(name, _names, isBlurEvent);\r\n            set(_formValues, name, fieldValue);\r\n            if (isBlurEvent) {\r\n                field._f.onBlur && field._f.onBlur(event);\r\n                delayErrorCallback && delayErrorCallback(0);\r\n            }\r\n            else if (field._f.onChange) {\r\n                field._f.onChange(event);\r\n            }\r\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\r\n            const shouldRender = !isEmptyObject(fieldState) || watched;\r\n            !isBlurEvent &&\r\n                _subjects.watch.next({\r\n                    name,\r\n                    type: event.type,\r\n                });\r\n            if (shouldSkipValidation) {\r\n                return (shouldRender &&\r\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\r\n            }\r\n            !isBlurEvent && watched && _subjects.state.next({});\r\n            validateFields[name] = validateFields[name] ? +1 : 1;\r\n            _subjects.state.next({\r\n                isValidating: true,\r\n            });\r\n            if (_options.resolver) {\r\n                const { errors } = await _executeSchema([name]);\r\n                const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\r\n                const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\r\n                error = errorLookupResult.error;\r\n                name = errorLookupResult.name;\r\n                isValid = isEmptyObject(errors);\r\n            }\r\n            else {\r\n                error = (await validateField(field, get(_formValues, name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\r\n                isValid = await _updateValid(true);\r\n            }\r\n            field._f.deps &&\r\n                trigger(field._f.deps);\r\n            shouldRenderByError(name, isValid, error, fieldState);\r\n        }\r\n    };\r\n    const trigger = async (name, options = {}) => {\r\n        let isValid;\r\n        let validationResult;\r\n        const fieldNames = convertToArrayPayload(name);\r\n        _subjects.state.next({\r\n            isValidating: true,\r\n        });\r\n        if (_options.resolver) {\r\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\r\n            isValid = isEmptyObject(errors);\r\n            validationResult = name\r\n                ? !fieldNames.some((name) => get(errors, name))\r\n                : isValid;\r\n        }\r\n        else if (name) {\r\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\r\n                const field = get(_fields, fieldName);\r\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\r\n            }))).every(Boolean);\r\n            !(!validationResult && !_formState.isValid) && _updateValid();\r\n        }\r\n        else {\r\n            validationResult = isValid = await executeBuiltInValidation(_fields);\r\n        }\r\n        _subjects.state.next({\r\n            ...(!isString(name) ||\r\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\r\n                ? {}\r\n                : { name }),\r\n            ...(_options.resolver ? { isValid } : {}),\r\n            errors: _formState.errors,\r\n            isValidating: false,\r\n        });\r\n        options.shouldFocus &&\r\n            !validationResult &&\r\n            focusFieldBy(_fields, (key) => get(_formState.errors, key), name ? fieldNames : _names.mount);\r\n        return validationResult;\r\n    };\r\n    const getValues = (fieldNames) => {\r\n        const values = {\r\n            ..._defaultValues,\r\n            ...(_stateFlags.mount ? _formValues : {}),\r\n        };\r\n        return isUndefined(fieldNames)\r\n            ? values\r\n            : isString(fieldNames)\r\n                ? get(values, fieldNames)\r\n                : fieldNames.map((name) => get(values, name));\r\n    };\r\n    const getFieldState = (name, formState) => ({\r\n        invalid: !!get((formState || _formState).errors, name),\r\n        isDirty: !!get((formState || _formState).dirtyFields, name),\r\n        isTouched: !!get((formState || _formState).touchedFields, name),\r\n        error: get((formState || _formState).errors, name),\r\n    });\r\n    const clearErrors = (name) => {\r\n        name\r\n            ? convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName))\r\n            : (_formState.errors = {});\r\n        _subjects.state.next({\r\n            errors: _formState.errors,\r\n        });\r\n    };\r\n    const setError = (name, error, options) => {\r\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\r\n        set(_formState.errors, name, {\r\n            ...error,\r\n            ref,\r\n        });\r\n        _subjects.state.next({\r\n            name,\r\n            errors: _formState.errors,\r\n            isValid: false,\r\n        });\r\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\r\n    };\r\n    const watch = (name, defaultValue) => isFunction(name)\r\n        ? _subjects.watch.subscribe({\r\n            next: (info) => name(_getWatch(undefined, defaultValue), info),\r\n        })\r\n        : _getWatch(name, defaultValue, true);\r\n    const unregister = (name, options = {}) => {\r\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\r\n            _names.mount.delete(fieldName);\r\n            _names.array.delete(fieldName);\r\n            if (get(_fields, fieldName)) {\r\n                if (!options.keepValue) {\r\n                    unset(_fields, fieldName);\r\n                    unset(_formValues, fieldName);\r\n                }\r\n                !options.keepError && unset(_formState.errors, fieldName);\r\n                !options.keepDirty && unset(_formState.dirtyFields, fieldName);\r\n                !options.keepTouched && unset(_formState.touchedFields, fieldName);\r\n                !_options.shouldUnregister &&\r\n                    !options.keepDefaultValue &&\r\n                    unset(_defaultValues, fieldName);\r\n            }\r\n        }\r\n        _subjects.watch.next({});\r\n        _subjects.state.next({\r\n            ..._formState,\r\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\r\n        });\r\n        !options.keepIsValid && _updateValid();\r\n    };\r\n    const register = (name, options = {}) => {\r\n        let field = get(_fields, name);\r\n        const disabledIsDefined = isBoolean(options.disabled);\r\n        set(_fields, name, {\r\n            _f: {\r\n                ...(field && field._f ? field._f : { ref: { name } }),\r\n                name,\r\n                mount: true,\r\n                ...options,\r\n            },\r\n        });\r\n        _names.mount.add(name);\r\n        field\r\n            ? disabledIsDefined &&\r\n                set(_formValues, name, options.disabled\r\n                    ? undefined\r\n                    : get(_formValues, name, getFieldValue(field._f)))\r\n            : updateValidAndValue(name, true, options.value);\r\n        return {\r\n            ...(disabledIsDefined ? { disabled: options.disabled } : {}),\r\n            ...(_options.shouldUseNativeValidation\r\n                ? {\r\n                    required: !!options.required,\r\n                    min: getRuleValue(options.min),\r\n                    max: getRuleValue(options.max),\r\n                    minLength: getRuleValue(options.minLength),\r\n                    maxLength: getRuleValue(options.maxLength),\r\n                    pattern: getRuleValue(options.pattern),\r\n                }\r\n                : {}),\r\n            name,\r\n            onChange,\r\n            onBlur: onChange,\r\n            ref: (ref) => {\r\n                if (ref) {\r\n                    register(name, options);\r\n                    field = get(_fields, name);\r\n                    const fieldRef = isUndefined(ref.value)\r\n                        ? ref.querySelectorAll\r\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\r\n                            : ref\r\n                        : ref;\r\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\r\n                    const refs = field._f.refs || [];\r\n                    if (radioOrCheckbox\r\n                        ? refs.find((option) => option === fieldRef)\r\n                        : fieldRef === field._f.ref) {\r\n                        return;\r\n                    }\r\n                    set(_fields, name, {\r\n                        _f: {\r\n                            ...field._f,\r\n                            ...(radioOrCheckbox\r\n                                ? {\r\n                                    refs: [\r\n                                        ...refs.filter(live),\r\n                                        fieldRef,\r\n                                        ...(!!Array.isArray(get(_defaultValues, name))\r\n                                            ? [{}]\r\n                                            : []),\r\n                                    ],\r\n                                    ref: { type: fieldRef.type, name },\r\n                                }\r\n                                : { ref: fieldRef }),\r\n                        },\r\n                    });\r\n                    updateValidAndValue(name, false, undefined, fieldRef);\r\n                }\r\n                else {\r\n                    field = get(_fields, name, {});\r\n                    if (field._f) {\r\n                        field._f.mount = false;\r\n                    }\r\n                    (_options.shouldUnregister || options.shouldUnregister) &&\r\n                        !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\r\n                        _names.unMount.add(name);\r\n                }\r\n            },\r\n        };\r\n    };\r\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\r\n        if (e) {\r\n            e.preventDefault && e.preventDefault();\r\n            e.persist && e.persist();\r\n        }\r\n        let hasNoPromiseError = true;\r\n        let fieldValues = cloneObject(_formValues);\r\n        _subjects.state.next({\r\n            isSubmitting: true,\r\n        });\r\n        try {\r\n            if (_options.resolver) {\r\n                const { errors, values } = await _executeSchema();\r\n                _formState.errors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                await executeBuiltInValidation(_fields);\r\n            }\r\n            if (isEmptyObject(_formState.errors)) {\r\n                _subjects.state.next({\r\n                    errors: {},\r\n                    isSubmitting: true,\r\n                });\r\n                await onValid(fieldValues, e);\r\n            }\r\n            else {\r\n                if (onInvalid) {\r\n                    await onInvalid({ ..._formState.errors }, e);\r\n                }\r\n                _options.shouldFocusError &&\r\n                    focusFieldBy(_fields, (key) => get(_formState.errors, key), _names.mount);\r\n            }\r\n        }\r\n        catch (err) {\r\n            hasNoPromiseError = false;\r\n            throw err;\r\n        }\r\n        finally {\r\n            _formState.isSubmitted = true;\r\n            _subjects.state.next({\r\n                isSubmitted: true,\r\n                isSubmitting: false,\r\n                isSubmitSuccessful: isEmptyObject(_formState.errors) && hasNoPromiseError,\r\n                submitCount: _formState.submitCount + 1,\r\n                errors: _formState.errors,\r\n            });\r\n        }\r\n    };\r\n    const resetField = (name, options = {}) => {\r\n        if (get(_fields, name)) {\r\n            if (isUndefined(options.defaultValue)) {\r\n                setValue(name, get(_defaultValues, name));\r\n            }\r\n            else {\r\n                setValue(name, options.defaultValue);\r\n                set(_defaultValues, name, options.defaultValue);\r\n            }\r\n            if (!options.keepTouched) {\r\n                unset(_formState.touchedFields, name);\r\n            }\r\n            if (!options.keepDirty) {\r\n                unset(_formState.dirtyFields, name);\r\n                _formState.isDirty = options.defaultValue\r\n                    ? _getDirty(name, get(_defaultValues, name))\r\n                    : _getDirty();\r\n            }\r\n            if (!options.keepError) {\r\n                unset(_formState.errors, name);\r\n                _proxyFormState.isValid && _updateValid();\r\n            }\r\n            _subjects.state.next({ ..._formState });\r\n        }\r\n    };\r\n    const reset = (formValues, keepStateOptions = {}) => {\r\n        const updatedValues = formValues || _defaultValues;\r\n        const cloneUpdatedValues = cloneObject(updatedValues);\r\n        const values = formValues && !isEmptyObject(formValues)\r\n            ? cloneUpdatedValues\r\n            : _defaultValues;\r\n        if (!keepStateOptions.keepDefaultValues) {\r\n            _defaultValues = updatedValues;\r\n        }\r\n        if (!keepStateOptions.keepValues) {\r\n            if (keepStateOptions.keepDirtyValues) {\r\n                for (const fieldName of _names.mount) {\r\n                    get(_formState.dirtyFields, fieldName)\r\n                        ? set(values, fieldName, get(_formValues, fieldName))\r\n                        : setValue(fieldName, get(values, fieldName));\r\n                }\r\n            }\r\n            else {\r\n                if (isWeb && isUndefined(formValues)) {\r\n                    for (const name of _names.mount) {\r\n                        const field = get(_fields, name);\r\n                        if (field && field._f) {\r\n                            const fieldReference = Array.isArray(field._f.refs)\r\n                                ? field._f.refs[0]\r\n                                : field._f.ref;\r\n                            try {\r\n                                if (isHTMLElement(fieldReference)) {\r\n                                    fieldReference.closest('form').reset();\r\n                                    break;\r\n                                }\r\n                            }\r\n                            catch (_a) { }\r\n                        }\r\n                    }\r\n                }\r\n                _fields = {};\r\n            }\r\n            _formValues = props.shouldUnregister\r\n                ? keepStateOptions.keepDefaultValues\r\n                    ? cloneObject(_defaultValues)\r\n                    : {}\r\n                : cloneUpdatedValues;\r\n            _subjects.array.next({\r\n                values,\r\n            });\r\n            _subjects.watch.next({\r\n                values,\r\n            });\r\n        }\r\n        _names = {\r\n            mount: new Set(),\r\n            unMount: new Set(),\r\n            array: new Set(),\r\n            watch: new Set(),\r\n            watchAll: false,\r\n            focus: '',\r\n        };\r\n        _stateFlags.mount =\r\n            !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\r\n        _stateFlags.watch = !!props.shouldUnregister;\r\n        _subjects.state.next({\r\n            submitCount: keepStateOptions.keepSubmitCount\r\n                ? _formState.submitCount\r\n                : 0,\r\n            isDirty: keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\r\n                ? _formState.isDirty\r\n                : !!(keepStateOptions.keepDefaultValues &&\r\n                    !deepEqual(formValues, _defaultValues)),\r\n            isSubmitted: keepStateOptions.keepIsSubmitted\r\n                ? _formState.isSubmitted\r\n                : false,\r\n            dirtyFields: keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\r\n                ? _formState.dirtyFields\r\n                : keepStateOptions.keepDefaultValues && formValues\r\n                    ? getDirtyFields(_defaultValues, formValues)\r\n                    : {},\r\n            touchedFields: keepStateOptions.keepTouched\r\n                ? _formState.touchedFields\r\n                : {},\r\n            errors: keepStateOptions.keepErrors\r\n                ? _formState.errors\r\n                : {},\r\n            isSubmitting: false,\r\n            isSubmitSuccessful: false,\r\n        });\r\n    };\r\n    const setFocus = (name, options = {}) => {\r\n        const field = get(_fields, name)._f;\r\n        const fieldRef = field.refs ? field.refs[0] : field.ref;\r\n        fieldRef.focus();\r\n        options.shouldSelect && fieldRef.select();\r\n    };\r\n    return {\r\n        control: {\r\n            register,\r\n            unregister,\r\n            getFieldState,\r\n            _executeSchema,\r\n            _getWatch,\r\n            _getDirty,\r\n            _updateValid,\r\n            _removeUnmounted,\r\n            _updateFieldArray,\r\n            _getFieldArray,\r\n            _subjects,\r\n            _proxyFormState,\r\n            get _fields() {\r\n                return _fields;\r\n            },\r\n            get _formValues() {\r\n                return _formValues;\r\n            },\r\n            get _stateFlags() {\r\n                return _stateFlags;\r\n            },\r\n            set _stateFlags(value) {\r\n                _stateFlags = value;\r\n            },\r\n            get _defaultValues() {\r\n                return _defaultValues;\r\n            },\r\n            get _names() {\r\n                return _names;\r\n            },\r\n            set _names(value) {\r\n                _names = value;\r\n            },\r\n            get _formState() {\r\n                return _formState;\r\n            },\r\n            set _formState(value) {\r\n                _formState = value;\r\n            },\r\n            get _options() {\r\n                return _options;\r\n            },\r\n            set _options(value) {\r\n                _options = {\r\n                    ..._options,\r\n                    ...value,\r\n                };\r\n            },\r\n        },\r\n        trigger,\r\n        register,\r\n        handleSubmit,\r\n        watch,\r\n        setValue,\r\n        getValues,\r\n        reset,\r\n        resetField,\r\n        clearErrors,\r\n        unregister,\r\n        setError,\r\n        setFocus,\r\n        getFieldState,\r\n    };\r\n}\n\n/**\r\n * Custom hook to manage the entire form.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\r\n *\r\n * @param props - form configuration and validation parameters.\r\n *\r\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   console.log(watch(\"example\"));\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(onSubmit)}>\r\n *       <input defaultValue=\"test\" {...register(\"example\")} />\r\n *       <input {...register(\"exampleRequired\", { required: true })} />\r\n *       {errors.exampleRequired && <span>This field is required</span>}\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useForm(props = {}) {\r\n    const _formControl = React.useRef();\r\n    const [formState, updateFormState] = React.useState({\r\n        isDirty: false,\r\n        isValidating: false,\r\n        dirtyFields: {},\r\n        isSubmitted: false,\r\n        submitCount: 0,\r\n        touchedFields: {},\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: false,\r\n        errors: {},\r\n    });\r\n    if (_formControl.current) {\r\n        _formControl.current.control._options = props;\r\n    }\r\n    else {\r\n        _formControl.current = {\r\n            ...createFormControl(props),\r\n            formState,\r\n        };\r\n    }\r\n    const control = _formControl.current.control;\r\n    const callback = React.useCallback((value) => {\r\n        if (shouldRenderFormState(value, control._proxyFormState, true)) {\r\n            control._formState = {\r\n                ...control._formState,\r\n                ...value,\r\n            };\r\n            updateFormState({ ...control._formState });\r\n        }\r\n    }, [control]);\r\n    useSubscribe({\r\n        subject: control._subjects.state,\r\n        callback,\r\n    });\r\n    React.useEffect(() => {\r\n        if (!control._stateFlags.mount) {\r\n            control._proxyFormState.isValid && control._updateValid();\r\n            control._stateFlags.mount = true;\r\n        }\r\n        if (control._stateFlags.watch) {\r\n            control._stateFlags.watch = false;\r\n            control._subjects.state.next({});\r\n        }\r\n        control._removeUnmounted();\r\n    });\r\n    _formControl.current.formState = getProxyFormState(formState, control._proxyFormState);\r\n    return _formControl.current;\r\n}\n\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n","import React from \"react\";\n\nimport Job from './Job';\n\nconst Jobs = ({ jobs }) => {\n  if (jobs.length === 0) {\n    return (\n      <div className=\"jobList\">\n        <div className=\"noJobs\">\n          No jobs currently listed 😢&nbsp; <a href=\"https://github.com/numfocus/jobs-board#posting-a-job\">Make a PR!</a>\n        </div>\n      </div>\n    )\n  }\n  return (\n    <div className=\"jobList\">\n      {\n        jobs.map((job) =>\n          <Job job={job} key={job.id}/>\n        )\n      }\n    </div>\n  );\n};\n\nexport default Jobs;\n","import React from \"react\";\n\nconst HowToPost = () => (\n  <div className=\"howToPost\">\n    <p>\n      To post a job, please&nbsp;\n      <a href=\"https://github.com/numfocus/jobs-board#posting-a-job\">\n        see the instructions\n      </a>.\n    </p>\n    <p>\n      An example post template can be found&nbsp;\n      <a href=\"https://github.com/numfocus/jobs-board/blob/master/jobs/template.yaml\">\n        here\n      </a>.\n    </p>\n  </div>\n);\n\nexport default HowToPost;\n","const jobs = [{\"entity\": \"PyBaMM\", \"title\": \"PyBaMM Fundraising Lead\", \"url\": \"https://pybamm.org/news/2024/07/15/role-adverts/\", \"percentTime\": 10, \"percentOSS\": 10, \"deadline\": \"2024-09-27\", \"expires\": \"2024-09-27\", \"location\": \"Remote\", \"description\": \"We are advertising a fundraising lead position within the PyBaMM team. This role is fundamental for the growth of our project and community, and we are looking for an enthusiastic and dedicated individual to join our team. The position are open to all members of the PyBaMM community (from users to maintainers), and we encourage applications from a diverse range of backgrounds and experiences. Note that this is a volunteering (i.e. unpaid) position. The deadline for applications is the ~~6th of September 2024~~ 27th of September 2024 (Anywhere on Earth). Please see below for more details on each role and how to apply.\\n\\n**About PyBaMM**\\nPyBaMM (Python Battery Mathematical Modelling) is an open-source software project dedicated to the development and application of battery models. Our goal is to advance battery science and technology through high-quality, accessible modeling tools.\\n\\n**Role overview**\\nAs the Fundraising Lead for PyBaMM, you will be responsible for developing and executing a comprehensive fundraising strategy to support the project's initiatives. You will coordinate grant writing, build and maintain relationships with sponsors, and analyse donation data to inform the Steering Council. Additionally, you will work closely with the conference lead to secure funding for PyBaMM's annual conference. Your role is crucial in ensuring the financial health and growth of our open-source project.\\n\\n**Duties and responsibilities**\\n- Develop and implement PyBaMM\\u2019s fundraising strategy to support its goals and objectives.\\n- Coordinate grant applications and funding proposals to secure financial support.\\n- Cultivate and maintain relationships with sponsors.\\n- Analyse donations data to track progress and inform strategic decisions, and report quarterly to the Steering Council.\\n- Work closely with the conference organising committee to secure funding for PyBaMM\\u2019s conferences and events.\\n\\n**Criteria**\\n1. Previous experience in fundraising for charities or similar organizations.\\n2. A background in science, particularly in fields related to battery technology.\\n3. Strong written and oral communication skills, and the ability to communicate with non-technical audiences.\\n4. Strong interpersonal skills to build and maintain relationships with sponsors, donors, and team members.\\n5. Ability to work both independently and collaboratively within a team environment.\\n6. Experience with open-source software projects (desirable).\\n7. Experience in battery modelling (desirable).\\n8. Being an active contributor or maintainer of PyBaMM or related projects (desirable).\\n\\n**How to apply**\\nTo apply to any of the positions, send an email to [pybamm@pybamm.org](mailto:pybamm@pybamm.org) attaching a short CV (2 pages max) and a cover letter (1 page max) detailing how you meet the criteria for the role. The email should the subject \\\"[Fundraising lead] CANDIDATE NAME\\\".\\n\\nIf applying to multiple roles, please send separate emails (with the corresponding subject line). The CV can be the same for all applications, but candidates are encouraged to tailor their cover letter to the specific role they are applying for.\\n\\nThe deadline to submit the applications is the ~~6th of September 2024~~ 27th of September 2024 (Anywhere on Earth). Shortlisted candidates will be invited to a virtual interview in the weeks following.\\n\\nTime commitment is expected to average to around half a day (4 hours) a week. PyBaMM is an open source project and all positions are on a volunteering basis (i.e. unpaid). PyBaMM is committed to diversity and inclusion and encourages applications from all qualified candidates, regardless of race, ethnicity, gender, disability, age, or other status. If you have any questions about the roles or the application process, please contact us at [pybamm@pybamm.org](mailto:pybamm@pybamm.org).\\n\", \"date\": \"2024-07-17\", \"id\": \"2024-07-17_pybamm\"}, {\"entity\": \"PyBaMM\", \"title\": \"PyBaMM Community Manager\", \"url\": \"https://pybamm.org/news/2024/07/15/role-adverts/\", \"percentTime\": 10, \"percentOSS\": 10, \"deadline\": \"2024-09-27\", \"expires\": \"2024-09-27\", \"location\": \"Remote\", \"description\": \"We are advertising a community manager position within the PyBaMM team. This role is fundamental for the growth of our project and community, and we are looking for an enthusiastic and dedicated individual to join our team. The position are open to all members of the PyBaMM community (from users to maintainers), and we encourage applications from a diverse range of backgrounds and experiences. Note that this is a volunteering (i.e. unpaid) position. The deadline for applications is the ~~6th of September 2024~~ 27th of September 2024 (Anywhere on Earth). Please see below for more details on each role and how to apply.\\n\\n**About PyBaMM**\\nPyBaMM (Python Battery Mathematical Modelling) is an open-source software project dedicated to the development and application of battery models. Our goal is to advance battery science and technology through high-quality, accessible modeling tools.\\n\\n**Role overview**\\nAs the Community Manager for PyBaMM, you will serve as the primary liaison between various teams and the broader community of users and contributors. Your role will include managing community interactions, reporting on community health, and overseeing internship programs. You will also be responsible for triaging GitHub discussion posts and monitoring the project's email accounts. Your efforts will help ensure a vibrant, collaborative, and supportive community around PyBaMM.\\n\\n**Duties and responsibilities**\\n- Liaise and coordinate with the various teams within the PyBaMM community to facilitate smooth communication and collaboration.\\n- Report to the Steering Council (SC) quarterly about the state of the community, covering aspects from user engagement to maintainer activities.\\n- Act as the project\\u2019s contact point for [internship programs](../../../../open-source-programs.md), such as Google Summer of Code or Outreachy, ensuring successful participation and mentorship.\\n- Lead the triage of the project\\u2019s GitHub discussion posts, ensuring timely and effective responses to community queries.\\n- Monitor PyBaMM\\u2019s email accounts, addressing inquiries and redirecting messages as needed.\\n\\n**Criteria**\\n1. Being a PyBaMM contributor.\\n2. Ability to work both independently and as part of a team.\\n3. Good communication skills, both written and oral.\\n4. Conflict resolution and problem-solving skills to manage and resolve community disputes.\\n5. Good project management skills to coordinate multiple community-related initiatives simultaneously.\\n6. Being a PyBaMM maintainer (desirable)\\n7. Similar experience in other projects (desirable).\\n\\n**How to apply**\\nTo apply to any of the positions, send an email to [pybamm@pybamm.org](mailto:pybamm@pybamm.org) attaching a short CV (2 pages max) and a cover letter (1 page max) detailing how you meet the criteria for the role. The email should the subject \\\"[Community manager] CANDIDATE NAME\\\".\\n\\nIf applying to multiple roles, please send separate emails (with the corresponding subject line). The CV can be the same for all applications, but candidates are encouraged to tailor their cover letter to the specific role they are applying for.\\n\\nThe deadline to submit the applications is the ~~6th of September 2024~~ 27th of September 2024 (Anywhere on Earth). Shortlisted candidates will be invited to a virtual interview in the weeks following.\\n\\nTime commitment is expected to average to around half a day (4 hours) a week. PyBaMM is an open source project and all positions are on a volunteering basis (i.e. unpaid). PyBaMM is committed to diversity and inclusion and encourages applications from all qualified candidates, regardless of race, ethnicity, gender, disability, age, or other status. If you have any questions about the roles or the application process, please contact us at [pybamm@pybamm.org](mailto:pybamm@pybamm.org).\\n\", \"date\": \"2024-07-16\", \"id\": \"2024-07-16_pybamm\"}, {\"entity\": \"PyBaMM\", \"title\": \"PyBaMM Communications Lead\", \"url\": \"https://pybamm.org/news/2024/07/15/role-adverts/\", \"percentTime\": 10, \"percentOSS\": 10, \"deadline\": \"2024-09-27\", \"expires\": \"2024-09-27\", \"location\": \"Remote\", \"description\": \"We are advertising a communications lead position within the PyBaMM team. This role is fundamental for the growth of our project and community, and we are looking for an enthusiastic and dedicated individual to join our team. The position are open to all members of the PyBaMM community (from users to maintainers), and we encourage applications from a diverse range of backgrounds and experiences. Note that this is a volunteering (i.e. unpaid) position. The deadline for applications is the ~~6th of September 2024~~ 27th of September 2024 (Anywhere on Earth). Please see below for more details on each role and how to apply.\\n\\n**About PyBaMM**\\nPyBaMM (Python Battery Mathematical Modelling) is an open-source software project dedicated to the development and application of battery models. Our goal is to advance battery science and technology through high-quality, accessible modeling tools.\\n\\n**Role overview**\\nAs the Communications Lead for PyBaMM, you will be responsible for managing and growing the project's online presence, developing and executing our communication strategy, and creating engaging content that resonates with our audience. You will play a key role in defining PyBaMM's communication policy, supporting the development of educational materials, and promoting our annual conference. Your efforts will help to increase awareness, engagement, and support for PyBaMM within the scientific and engineering communities.\\n\\n**Duties and responsibilities**\\n- Oversee and manage PyBaMM's current social media platforms, particularly X (Twitter) and LinkedIn.\\n- Create engaging content regularly, starting with one post every other week and aiming to increase to one post per week in the mid-term.\\n- Define and uphold the communication policy of the project, including evaluating and establishing a presence on additional platforms as needed.\\n- Assist in the creation of educational materials, including video tutorials and other resources.\\n- Collaborate with the conference organising committee to promote PyBaMM's annual conference, ensuring effective communication and outreach.\\n\\n**Criteria**\\n1. Proven experience in communication, preferably in science communication.\\n2. Proficiency with X (Twitter) and LinkedIn is required. Experience with other social networks will also be valued positively.\\n3. Experience with open-source software projects.\\n4. Experience or understanding of battery modelling.\\n5. Ability to work both independently and as part of a team.\\n6. Skills in graphic design (desirable).\\n7. Experience with video editing (desirable).\\n8. Being a contributor or maintainer of PyBaMM (desirable).\\n\\n**How to apply**\\nTo apply to any of the positions, send an email to [pybamm@pybamm.org](mailto:pybamm@pybamm.org) attaching a short CV (2 pages max) and a cover letter (1 page max) detailing how you meet the criteria for the role. The email should the subject \\\"[Communications lead] CANDIDATE NAME\\\".\\n\\nIf applying to multiple roles, please send separate emails (with the corresponding subject line). The CV can be the same for all applications, but candidates are encouraged to tailor their cover letter to the specific role they are applying for.\\n\\nThe deadline to submit the applications is the ~~6th of September 2024~~ 27th of September 2024 (Anywhere on Earth). Shortlisted candidates will be invited to a virtual interview in the weeks following.\\n\\nTime commitment is expected to average to around half a day (4 hours) a week. PyBaMM is an open source project and all positions are on a volunteering basis (i.e. unpaid). PyBaMM is committed to diversity and inclusion and encourages applications from all qualified candidates, regardless of race, ethnicity, gender, disability, age, or other status. If you have any questions about the roles or the application process, please contact us at [pybamm@pybamm.org](mailto:pybamm@pybamm.org).\\n\", \"date\": \"2024-07-15\", \"id\": \"2024-07-15_pybamm\"}, {\"entity\": \"Earthmover\", \"title\": \"Xarray Community Developer\", \"url\": \"https://jobs.gusto.com/postings/earthmover-xarray-community-developer-498dca94-335e-4d5c-a6c7-83ca19772512\", \"percentTime\": 100, \"percentOSS\": 100, \"deadline\": \"2024-09-01\", \"expires\": \"2024-09-01\", \"location\": \"Remote\", \"description\": \"Join the Earthmover team as a open source community developer and help us make Xarray the best tool for working with scientific data.\\n\\n**About Earthmover**:\\n\\n[Earthmover](https://earthmover.io/) is building products that solves the biggest storage and compute challenges of our time for users in the deep sciences - think climate, earth observations, biotech, machine learning, and AI.\\n\\nOur first product, [Arraylake](https://docs.earthmover.io/), is a data lake platform for multi-dimensional scientific array data. It enables users to manage and process array data in open standard cloud-native formats, with features like versioning, cataloging, collaboration and access control on top. Arraylake was built to integrate seamlessly with the open source scientific Python ecosystem, and provides an interface via the [Zarr](https://zarr.dev/) project. Through the [Zarr interface](https://zarr.readthedocs.io/en/stable/), scientific data users interact with data via libraries such as [Xarray](https://xarray.dev/), [AnnData](https://anndata.readthedocs.io/en/latest/), [Cooler](https://cooler.readthedocs.io/en/latest/), [Napari](https://napari.org/), and others.\\n\\nOur team has deep experience developing and maintaining open source software libraries across the scientific Python ecosystem. We\\u2019re now looking to expand the team to include a focus on building and supporting Xarray *specifically for the biomedical research community (Note: t*his position will be partially funded by a grant from the Chan Chan Zuckerberg Initiative).\\n\\nEarthmover values a diverse workplace and **strongly** encourages women, people of color, LGBT individuals, people with disabilities, members of ethnic minorities, foreign-born residents, and veterans to apply. We want *you*.\\n\\n**Job Description**:\\n\\nThis role will focus on building connections, both technical and social, between the Xarray project and the biomedical research community. We want you to join the Earthmover team to do a mix of technical engineering work and community stewarding, serving the needs of biomedical researchers in fields like microscopy, genomics, and neurophysiology.\\n\\n**Responsibilities**:\\n\\nWe expect this role to be\\n\\n- 50% Targeted feature development, integration work, and maintenance work aimed at accelerating the adoption of Xarray across the biomedical community. There are a number of high-impact projects in the queue waiting for an eager developer to jump in.\\n- 30% Outreach (office hours, blog posts, conferences).\\n- 20% Community coordination and support (integration support, issue triage)\\n\\n**You\\u2019re a great fit if you**\\n\\n- Have experience developing open source projects in the Scientific Python ecosystem like NumPy, Pandas, Xarray, Dask, and/or Zarr. Bonus points if you\\u2019ve already been contributing to an open source project.\\n- Have a background that intersects with one or more biomedical research areas. This could include prior research experience and/or supporting research in a data science, data engineering, and/or software engineering capacity.\\n- Have a passion for seeing community software projects thrive.\\n- Want to help the the biomedical research community use open software and open data to solve hard problems.\\n\\n**Our open source stack**:\\n\\n- [Xarray](https://xarray.dev/) is the focus of this hire. It provides a high-level data model and API for working with labeled N-dimensional arrays. Think of it it like Pandas for multidimensional data.\\n- [Zarr](https://zarr.dev/) is a community developed data format for chunked, compressed multidimensional arrays. Zarr-Python is the interface to Zarr used by Xarray, Arraylake, and many other libraries.\\n- Both Xarray and Zarr are built to integrate with the rest of the Scientific Python ecosystem. Think NumPy, SciPy, Scikit-learn, Dask, Matplotlib, etc.\\n\\n**Benefits**:\\n\\n- Company equity\\n- Health insurance through UnitedHealthcare - up to 99% of premium covered for employee under basic plan\\n- 20 days of PTO annually with a quarterly time off minimum\\n- 10 personal days annually\\n- 7 paid company holidays\\n- 12 weeks of paid family leave\\n- Quarterly company off-sites\\n\\nEarthmover is an equal-opportunity employer. Applicants will not be discriminated against because of race, color, creed, sex, sexual orientation, gender identity or expression, age, religion, national origin, citizenship status, disability, ancestry, marital status, veteran status, medical condition or any protected category prohibited by local, state or federal laws.\\n\\nAuthorization to work in the US is required for this position.\\n\\nEarthmover is currently an all-remote company; however, we are moving towards consolidating \\u201cpods\\u201d of team members in NYC, Denver, Seattle, and San Francisco.\\n\\n**Salary**: $135,000 - $150,000 per year\\n\", \"date\": \"2024-06-17\", \"id\": \"2024-06-17_earthmover\"}, {\"entity\": \"Quansight LLC\", \"title\": \"Senior Open Source Infrastructure Engineer\", \"url\": \"www.quansight.com/careers\", \"percentTime\": 100, \"percentOSS\": 100, \"deadline\": \"2024-08-01\", \"expires\": \"2024-08-01\", \"location\": \"Remote\", \"description\": \"We are seeking a fully remote, Senior Open Source Infrastructure Engineer to join our team at Quansight. \\nIn this role, you will support Quansights growing cloud and on-premises infrastructure and help make them more reliable, scalable, and efficient. You will work with our team to address support issues from our clients and collaborators, explore emerging technologies in the Cloud and DevOps spaces, and design and implement cloud computing systems with the rest of our infrastructure team.\\n\\nIn this position, you'll get to\\nContribute to nebari (https://nebari.dev), an open source Data Science platform built on JupyterHub, Dask, and other tools from the PyData ecosystem. Nebari uses Terraform and Helm to deploy these tools to Kubernetes in multiple clouds and on premises.\\nParticipate in upstream open source communities we rely on (such as JupyterHub, BinderHub, Dask, etc.) in partnership with the established leaders of those communities.\\nDeploy and ensure the reliable operation of Quansights and clients infrastructure under the direction of senior team members.\\nCollaborate with a fully distributed team - team members are expected to communicate and collaborate proactively to allocate effort and maximize the teams impact.\\nPosition Requirements\\nRequired:\\nExperience using infrastructure-as-code tooling such as Terraform, Pulumi, Cloudformation to deploy infrastructure.\\nExperience running production workloads in at least one major cloud platform (AWS, Azure, GCP)\\nExperience developing tools in a general purpose programming language (eg. Python).\\nExperience building Continuous Integration and Continuous Delivery (CI/CD) pipelines using tools such as GitHub actions, Gitlab CI/CD, Circle CI, etc.\\nFamiliarity with modern software engineering practices  including automated tests, code review, version control, observability, etc.\\nExperience containerizing and deploying applications to platforms such as Kubernetes, AWS ECS, and Google Cloud Run.\\nComfortable working independently and reaching out for feedback and support as needed.\\nExperience collaborating and coordinating work via online platforms, such as GitHub, GitLab, or BitBucket, and distributed revision control.\\nAbility to constructively receive feedback.\\n\\nWhile this is a remote position, we are looking for candidates with significant time overlap with US Central and Eastern time zones due to the location of many of our infrastructure team members and collaborators\\n\\nBonus points (not required, but these would be a great advantage)\\nExperience working on geographically distributed teams.\\nExperience working with or contributing to open-source projects.\\nExposure to the Python Data Science stack - Pandas, Numpy, Dask, etc.\\nExperience with the Jupyter ecosystem and other tools for interactive computing.\\nExperience with common data science methods, platforms, workflows, and infrastructures; with data management systems, practices, and standards; and the capacity to gain familiarity with new related topics.\\nExperience with Machine Learning Operations (MLOps) platforms, workflows, and infrastructures and the capacity to gain familiarity with new related topics.\\nCandidate journey\\nApplication: Once you have applied, a recruiter will review your application to determine if your work experience and skills align with the necessary competencies of this position. This recruiter will be in touch to schedule some time to connect if they determine that you could be a good fit for Quansight.\\nHR interview: This is an opportunity to get to know each other. We will tell you a little more about who we are, and we look forward to hearing about your past experiences and what you are looking for in your next role. We want to know why you are interested in joining us and what questions you have about our team and mission. This will be scheduled as a 30-minute Google Meet.\\nInterview loop: If you and your recruiter still feel you could be well-suited for this position following your call, we will arrange our interview loop with some team members. This will allow you to learn more about the team and the organization and for us to gain a deeper understanding of your skills and experience. For this particular role, the interview loop is as follows:\\nPre-Interview Assignment: Please choose one out of the three following options to complete prior to interviewing with our team.\\nTake Home Assessment. We will share a github repository with you that includes instructions for an infrastructure related task. You will create a Pull Request (PR) for us to review that accomplishes the task as specified.Please only devote up to 4 hours on this assignment.\\nPoint us to a substantial, public, infrastructure related Pull Request that you have authored and come prepared for a code walkthrough during your interview\\nSend us another infrastructure related codebase you have written and come prepared for a code walkthrough during your interview\\nTechnical interviews: we will schedule two separate interviews with Quansight team members (these will be potential teammates or cross-functional team members.)\\nHiring manager interview: in this one-hour interview, you will meet the hiring manager for this position. Questions in this interview will focus on your career, how you handle certain situations and your general approach to collaboration and work. We also factor in time for you to ask questions about the role and the organization.\\n\\nFollowing the completion of all interviews, our hiring team will make a final decision, and the recruiter will be in touch to share the outcome of your interviews. If the team wants to move forward, the recruiter will discuss this and the details of our proposed offer with you.\\n\", \"date\": \"2024-05-18\", \"id\": \"2024-05-18_quansight\"}, {\"entity\": \"Quansight LLC\", \"title\": \"Director of Professional Services - open source\", \"url\": \"www.quansight.com/careers\", \"percentTime\": 100, \"percentOSS\": 100, \"deadline\": \"2024-12-12\", \"expires\": \"2024-12-12\", \"location\": \"Remote\", \"description\": \"We are seeking an innovative Director of Professional Services - Open Source with leadership experience and an understanding of the PyData ecosystem to join our team. You will manage and grow Quansight\\u2019s technical consulting business in a target domain.\\n\\nKey Qualifications\\nDeep technical expertise in at least one area:\\nNumerical Computing\\nDistributed & High-Performance Computing\\nInfrastructure / Cloud\\nData Science / Machine Learning / AI\\nMLOps\\nData Engineering\\nContributions to open source projects or participation in open source communities\\nExperience in one or both of the following:\\nExtensive track record in client management\\nExperience leading technical project teams.\\nWhat You will Do\\n\\nAs a Director of Professional Services - Open Source, your role will be a mix of project definition, solution architecture, sales engineering, technical leadership, and people management. You will be expected to interface with clients and translate their needs into technical solutions. You will typically oversee several projects with a diverse set of clients in different verticals.\\n\\nResponsibilities\\nIdentify, scope, architect, resource, and oversee the delivery of large end-to-end projects for clients\\nCollaborate with project managers and other staff members to develop timelines for solutions.\\nAssess the systems architecture currently in place and work with technical staff to recommend solutions to improve it.\\nAssess and evaluate risk as required.\\nConsistently monitor the scope of projects.\\nUnderstand how individual work fits into the broader organizational picture.\\nKeep skills updated and remain proactively aware of happenings and current events in the industry.\\nMentor, educate, and train colleagues.\\nResolve technical problems as they arise.\\nInform various stakeholders about any problems with the current technical solutions being implemented.\\nProvide updates to stakeholders on product development processes, costs, and budgets\\nQualifications\\n5+ years of work experience in a relevant role; ideally professional services/consulting\\nExperience serving as a leader for the full life-cycle of projects from requirements gathering, and development, all the way through to implementation & roll-out.\\nExpertise in one or more core technology areas: Numerical Computing, Distributed & High-Performance Computing, Infrastructure/Cloud, Data Science/Machine Learning/AI, MLOps, and Data Engineering.\\nExcellent interpersonal communication skills and the ability to explain complex technical topics in an easily digestible manner.\\nIn-depth understanding of Python\\nStrong organizational and leadership skills.\\nContributions to open source projects\\nPrior consulting experience or experience working in a client-facing environment - a plus\\n\\nPlease keep in mind that we are describing the background we imagine would best fit the role. Even if you do not meet all of the requirements and are confident that you are up for the task, we want to get to know you!\\n\\nCandidate Journey\\nApplication: Once you have applied, a recruiter will review your application to determine if your work experience and skills align with the necessary competencies of this position. This recruiter will be in touch to schedule some time to connect if they determine that you could be a good fit for Quansight.\\nHR Interview: This is an opportunity to get to know each other. We will tell you a little more about who we are, and we look forward to hearing about your past experiences and what you are looking for in your next role. We want to know why you are interested in joining us and what questions you have about our team and mission. This will be scheduled as a 30-minute Google Meet.\\u00a0\\nInterview Loop: If you and your recruiter still feel you could be well-suited for this position following your call, we will arrange our interview loop with some team members. This will allow you to learn more about the team and the organization and for us to gain a deeper understanding of your skills and experience.\\u00a0 For this particular role, the interview loop is as follows:\\nTechnical Interview: This will be a 60-minute Google Meet with two of our Senior Software Engineers. We ask you to come ready to present code in one of the following areas where you have previous experience: Numerical Computing, Distributed & High-Performance Computing, Infrastructure/Cloud, Data Science/Machine Learning/AI, MLOps, and/or Data Engineering.\\nAfter presenting your code for 20-30 minutes, our engineers will ask follow-up questions. Then you will have time to discuss the day-to-day of working at Quansight and ask any questions you may have for them. If you do not have public code, we will provide a technical assessment.\\nCase Study Interview: This phase of the interview process will include one interview with up to four members of our leadership team. This interview will be 90 minutes long and held over Google Meet. You will be asked in advance to prepare a project proposal to present as the first part of the interview.\\u00a0\\nYou will have time for questions and answers as the second part of the interview. Our recruiter will share more details with you before the interview is scheduled.\\nFinal Leadership Interview: This will be a 60-minute Google Meet with our CTO and CEO to review the alignment of your professional goals and goals of the organization.\\n\\nFollowing the completion of all interviews, our hiring team will make a final decision, and the recruiter will be in touch to share the outcome of your interviews. If the team wants to move forward, the recruiter will discuss this and the details of our proposed offer with you.\\n\", \"date\": \"2024-05-17\", \"id\": \"2024-05-17_quansight\"}, {\"entity\": \"Unitary Fund\", \"title\": \"Community Manager\", \"url\": \"https://unitary.fund/jobs/community_manager/\", \"percentTime\": 100, \"percentOSS\": 100, \"deadline\": \"2023-10-31\", \"expires\": \"2023-11-30\", \"location\": \"Remote\", \"description\": \"This opening is a rare opportunity to help run a new type of research\\nnon-profit and contribute to the developing quantum technology ecosystem.\\n\\nUnitary Fund is a 501(c)(3) non-profit research group helping build a quantum technology industry that benefits the most people. We support the community, e.g., running a grant program to support the development of new open source quantum software, and we do our own research on key projects for the ecosystem.\\n\\nThis is a unique opportunity to have a direct impact on the growth of the quantum open source ecosystem and the tools that Unitary Fund is developing. We\\u2019re hiring a Community Manager to help oversee the organization and execution of a diverse array of community building activities, including the Mitiq open-source community activities, Quantum Wednesdays talk series, hackathons, workshops, as well as ongoing resources like the Unitary Fund Discord Server, community surveys, newsletters and blog.\\n\\nYou will build sustainable and community-oriented open source practices to ensure the tools of the quantum ecosystem reach more people, sooner. This includes development and execution of in-person and online events, as well as outreach strategies to build new audiences and ensure support for existing users. You will work with a diverse array of community members including Unitary Fund Donors, Ambassadors, Advisory Board Members, Grantees, users advocates and more. This position is full time with a competitive salary range, commensurate with experience. Unitary Fund is a fully remote team and this role is also remote.\\n\", \"date\": \"2023-09-01\", \"id\": \"2023-09-01_unitaryfund\"}, {\"entity\": \"Astropy\", \"title\": \"Research Software Engineer\", \"url\": \"https://www.astropy.org/\", \"percentTime\": \"50-100\", \"percentOSS\": 100, \"deadline\": \"2023-08-15\", \"expires\": \"2023-08-31\", \"location\": \"Remote\", \"description\": \"## About Astropy:\\nThe Astropy Project is a community effort to develop a common core package for Astronomy in Python and\\nfoster an ecosystem of interoperable astronomy packages. It is a widely used package in professional\\nastronomy supporting missions like NASA\\u2019s James Webb Space Telescope and the Square Kilometer Array.\\nOur community has over 1,200 members with nearly 200 active weekly. The majority of our members are based\\nin the US but many are from around the world. For more about the project goals, please look at our\\n[roadmap](https://github.com/astropy/astropy-project/blob/main/roadmap/roadmap.md).\\n\\n## About the Position:\\nThe Astropy Project is seeking to hire a full-time or part-time research software engineer to develop\\nand implement new features that the community has identified as high priorities in the\\n[roadmap](https://github.com/astropy/astropy-project/blob/main/roadmap/roadmap.md)\\nbut that the volunteer contributors do not have the capacity to deliver, as well as address smaller,\\nbut long-standing bugs and issues in the astropy core package and the coordinated packages.\\nThis is the first time that the Astropy Project itself does a dedicated hire for this purpose,\\nand thus it offers many opportunities to help build the role itself. As such, a driven and\\nresourceful individual with experience in integrating with a mostly volunteer-run project would be\\nbest suited for the role. If you are passionate about writing good software in the context of\\nopen source software communities read on and apply. Applications before August 15th 2023 will\\nreceive full consideration, but applications are accepted until the position is filled.\\n\\n### Key responsibilities of the role:\\n- Debug and fix exiting issues in the astropy core and other packages in the Astropy ecosystem.\\n- Plan, propose, discuss, and implement features as listed in the project roadmap](https://github.com/astropy/astropy-project/blob/main/roadmap/roadmap.md).\\n- Revise documentation for developers and suggest and implement improvements to the workflow and tools to reduce workload on existing maintainers and barriers to entry for new developers.\\n- Study and improve one or more of the infrastructure packages through pull requests and support the existing infrastructure team in ongoing maintenance\\n- Interact with other developers on github, slack, and in developer telecons\\n- Constructively review code and pull requests\\n\\n### The ideal candidate would have these skills:\\n- Collaborative attitude.\\n- Experience with a consensus-driven, geographically-dispersed software development team.\\n- Experience in the scientific Python stack (Python, numpy, matplotlib)\\n- Experience with continuous integration, writing tests, debugging, and pytest\\n- Experience with git and github\\n- Knowledge of scientific community engagement techniques\\n\\n## Desired Qualifications, but not necessary experiences include:\\n- Ability to motivate others to step up for long-term involvement in the project\\n- Experience in Python documentation and sphinx\\n- Experience in one or more languages used for compiled Python extensions (C, Cython, rust)\\n- Simple html/css skills\\n- Ability to positively interact with other contributors and offer advice, review, and mentorship to enhance the knowledge and ability of others\\n- Experience working with a multicultural, international community\\n- Experience in documenting workflows for new contributors and maintainers\\n- Knowledge of astronomy\\n\\n## Compensation and Term:\\nThe software developer is funded by the Astropy Project through NumFocus;\\nyou will invoice NumFOCUS for hours worked as an independent contractor.\\nThe total funding available is US$75,000 to be spent by March 31, 2024.\\nDepending on experience, we envision an hourly rate in the range 60-120 $/h,\\nwhich is about 20-40 h/week for the period September 1st to March 31st.\\nA lower level of effort or slightly longer time range can be accommodated,\\nif explicitly requested in the application. There is a possibility of further\\nextension: We would like this role to continue in the future, but this depends on\\nfunding and feedback from the community. This work is fully remote and can be done anywhere on Earth.\\n\\n## How to Apply:\\nIn order to apply, please send a cover letter, one page resume (ideally with links to previous pull requests or other contributions to open source projects), and a list of 2-3 names and contact information for people who have agreed to serve as a reference to Moritz G\\u00fcnther at moritz.guenther@gmx.de with the subject line \\u201cResearch Software engineer\\u201d and your last name.\\nFor questions about this position, please contact Moritz G\\u00fcnther at moritz.guenther@gmx.de.\\n\", \"date\": \"2023-07-31\", \"id\": \"2023-07-31_astropy\"}, {\"entity\": \"Aperio Software\", \"title\": \"Research Software Engineer\", \"url\": \"https://aperiosoftware.com\", \"percentTime\": 100, \"percentOSS\": 80, \"deadline\": \"2023-07-03\", \"expires\": \"2023-08-03\", \"location\": \"Remote\", \"description\": \"Aperio Software is a company that specialises in developing software and providing software training in scientific domains for a variety of organisations and open source projects.\\nPast and current projects include the development of user tools and calibration software for the Daniel K. Inouye Solar Telescope (DKIST), work on the AAS WorldWide Telescope project, contributions to the Astropy and SunPy projects, and development of the glue visualisation tool.\\n\\nAperio is seeking a research software engineer and experienced open-source contributor to work with us on our growing number of projects in solar physics and astronomy, primarily in established open-source projects.\\nThis will include working on the development, testing, documentation and maintenance of several different software packages and related infrastructure.\\nYou will be required to liaise with clients, other staff, and the open-source community. \\nFor more details see the full job description at [aperiosoftware.com/jobs](https://aperiosoftware.com/jobs).\\n\", \"date\": \"2023-06-09\", \"id\": \"2023-06-09_aperio\"}, {\"entity\": \"Astropy Project\", \"title\": \"Community Manager\", \"url\": \"https://www.astropy.org/\", \"percentTime\": 50, \"percentOSS\": 100, \"deadline\": \"2023-05-31\", \"expires\": \"2023-07-01\", \"location\": \"Remote\", \"description\": \"## About Astropy:\\nThe Astropy Project is a community effort to develop a common core package for Astronomy in Python and\\nfoster an ecosystem of interoperable astronomy packages. It is a widely used package in professional\\nastronomy supporting missions like NASA\\u2019s James Webb Space Telescope and the Square Kilometer Array.\\nOur community has over 1,200 members with nearly 200 active weekly. The majority of our members are based\\nin the US but many are from around the world. For more about the project goals, please look at our\\n[roadmap](https://github.com/astropy/astropy-project/blob/main/roadmap/roadmap.md).\\n\\n## About the Position:\\nThe Astropy Project is seeking to hire a part-time community manager to help grow and foster our diverse\\ncommunity of users, contributors, and developers. This is a new role in the organization offering many\\nopportunities to help build our community and the role itself. As such, a driven and resourceful individual\\nwould be best suited for the role. If you are passionate about engagement and equitable open source software\\ncommunities read on and apply by May 31, 2023.\\n\\n### Key responsibilities of the role:\\n- Manage and support the existing Astropy Project Community, in consultation with that community.\\n- Work to grow the Astropy Project community, and identify opportunities for collaboration by establishing relationships with users,\\nespecially from underrepresented communities and institutions.\\n- Track and report engagement activities of the Astropy Project.\\n- Run surveys to better understand the needs of our community and how to improve participation in our\\ncommunities for different stakeholders.\\n- Coordinate review and updates to the Astropy Code of Conduct, in consultation with the Astropy Coordination Committee.\\n\\n\\n### The ideal candidate would have these skills:\\n- Collaborative attitude.\\n- Experience with a consensus-driven, geographically-dispersed software development team.\\n- Ability to develop communication strategies to meet specific goals and reaching different audiences.\\n- Knowledge of communities who use Github as their primary communication mechanism.\\n- Demonstrable skills in group facilitation and stakeholder relationships management.\\n- Knowledge of scientific community engagement techniques.\\n- Experience and enthusiasm for Diversity, Equity, and Inclusion.\\n- Strong interpersonal skills.\\n- Excellent judgment and diplomacy.\\n- Excellent written and oral communication skills.\\n\\n### Desired Qualifications, but not necessary experiences include:\\n- Managing forums like Slack and email lists\\n- Managing social media accounts.\\n- Experience working with open source projects.\\n- Organizing in-person meetings of ~20 people.\\n- Using websites to communicate.\\n- Experience with building consensus around a code-of-conduct.\\n- Using surveys to shape strategy.\\n- Developing strategies to build a user-maintainer-contributor pipeline.\\n- Organizing in-person software workshops.\\n- Experience of working with a multicultural, international community.\\n- Experience moderating online discussion forums, blogging platforms, or similar.\\n- Event and project management experience.\\n- Awareness of current trends in academic culture and informal communication channels.\\n- Experience using Github to communicate, edit documents, or develop software.\\n\\n## Compensation and Term:\\nThe Community Manager is funded by Astropy Project which is managed by NumFocus.\\nThe position is for a minimum duration of one year at US$48,000 with a possibility of further extension,\\ndepending on the available funding.\\nWe envision this role to be ongoing and future contracts to be for longer terms.\\n\\n## How to Apply:\\nIn order to apply, please send a cover letter, one page resume, and a list of 2-3 names and contact information for people\\nwho have agreed to serve as a reference to Ana Gabela at angabela@gmail.com with the subject line Community Manager and your last name.\\n\\nFor questions about this position, please contact Ana Gabela at angabela@gmail.com.\\n\", \"date\": \"2023-04-07\", \"id\": \"2023-04-07_astropy\"}, {\"entity\": \"MDAnalysis\", \"title\": \"Project, community and outreach manager\", \"url\": \"https://contact.url\", \"percentTime\": 100, \"percentOSS\": 100, \"deadline\": \"2022-12-15\", \"expires\": \"2023-01-15\", \"location\": \"Remote\", \"description\": \"MDAnalysis is looking to hire a project, community and outreach manager. This is a remote full-time role on a 2-year contract, with possibility to renew subject to funding availability. The position will ideally start early in 2023.\\nThe responsibilities of this role are listed below and cover a range of activities to better serve our community and enhance the range and scope of our outreach and dissemination activities.\\n\\n\\n### Your profile\\n\\nYou are a proactive individual with a positive mindset and a can-do attitude. You have excellent communication skills and organisational/management experience. You are passionate about open source software in STEM and committed to advancing equity, diversity and inclusion in these communities.\\n\\n\\n### Role responsibilities\\n\\n- **Expanding outreach and mentoring participation.** MDAnalysis has an established track record of participating in various mentoring schemes, including Google Summer of Code, Google Season of Docs, and Outreachy. You will undertake key administrative tasks for these schemes, including; applying on MDAnalysis\\u2019s behalf, coordinating the project participation, contributing to the participant selection and supervising mentoring efforts. In addition, you will review and propose additional mentoring schemes MDAnalysis could participate in.\\n\\n- **Organising online workshops.** Together with the developer team, you will organise and help deliver a series of online workshops aimed at introducing new researchers in academia and industry to MDAnalysis, and showcasing how it can be integrated in their analysis workflows.\\n\\n- **Organising user group meetings (UGMs).** You will be tasked with organising one in-person user group meeting per year. UGMs are aimed at bringing together users and developers of the MDAnalysis package from different communities.\\n\\n- **ommunity bridge building.** You will build, maintain, and develop relationships between different open source projects in the computational chemistry/biophysics space to establish collaborations and coordinate development in a synergistic direction. This includes attending and representing MDAnalysis at community forums for other open source projects.\\n\\n- **Industrial partnerships.** A key goal of the project is to open up additional funding streams to sustain the project over the long term. To this end, you will build relationships with industrial partners, surveying their interest in adopting MDAnalysis and collecting information on desired features.\\n\\n- **Communicating with users and developers.** You will be responsible for updating the website, publishing blog posts, managing social media accounts and the Discord server, monitoring and communicating with users and developers on the mailing lists.\\n\\n- **Project management tasks.** You will manage and coordinate developer meetings, and provide administrative support to the project. This may include coordinating grant submission, liaising with funders and/or NumFOCUS. You will gather relevant metrics related to the project, which may include surveying users/developers.\\n\\n\\n### Salary\\n\\n$75,000 + benefits (up to $96,000 gross). Exact take-home pay will depend on the tax laws of the country of residence.\\nPlease note we are unable to arrange visas or work permits.\\n\\n### Location\\n\\nThis is a fully remote opportunity, with core team members in North America, Australasia and Europe and a global community of contributors. Due to the global span of the MDAnalysis community, this work will require working outside of the conventional 9-to-5 work day, for instance when attending team meetings.\\n\\n### Required criteria\\n\\n- Excellent communication and interpersonal skills\\n\\n- Familiarity with open source software related to any scientific discipline\\n\\n- Awareness and understanding of Diversity, Equity and Inclusion (DEI) initiatives and\\nthemes\\n\\n- Organisational experience e.g., workshop/seminar/conferences, grant management,\\ncross-institutional collaborations\\n\\n### Desired criteria\\n\\n- Familiarity with computational chemistry software\\n\\n- Familiarity with Python (or similar) and Jupyter notebooks\\n\\n- Familiarity with version control software and GitHub\\n\\n- Software development experience\\n\\n- Experience with coding documentation frameworks, (e.g. sphinx, jekyll, Markdown)\\n\\n- Experience with grant submission and management\\n\\n- Experience in leading or supporting initiatives or events focused on DEI\\n\\n### How to apply\\n\\nSend your CV (including 2 references) and a cover letter illustrating how your experience and qualifications match the job description to jobs@mdanalysis.org using the subject line: \\u201cCZI project manager\\u201d. \\nWe will start reviewing applications on an ongoing basis from December 15th.\\n\", \"date\": \"2022-11-11\", \"id\": \"2022-11-11_mdanalysis\"}, {\"entity\": \"OpenDP\", \"title\": \"Open-Source Community Manager\", \"url\": \"https://sjobs.brassring.com/TGnewUI/Search/Home/Home?partnerid=25240&siteid=5341#jobDetails=1950880_5341\", \"percentTime\": 100, \"percentOSS\": 100, \"deadline\": \"2022-12-31\", \"expires\": \"2022-12-31\", \"location\": \"On-Site and Remote Hybrid\", \"description\": \"OpenDP is an open-source initiative for building libraries, tools, and systems to share and analyze sensitive data with the strong mathematical protections of differential privacy.  It has a rapidly growing community that spans academia, industry, and government. The OpenDP community manager will assist the faculty directors, the executive committee, and the software development team in community outreach, engagement, governance, diversity, and inclusion.\\n\\nThis is a one year term appointment with the possibility of renewal.\\n\\n1. Plan and execute strategies to grow a diverse, inclusive open-source community, measuring, improving and reporting on metrics about diversity, equity and inclusion in the OpenDP community.\\n2. Engage with stakeholders within and outside the OpenDP community; manage communication and outreach on a regular basis over a variety of channels, such as website, email, mailing list, Github repos, GitHub Discussions, Slack, Twitter, etc.\\n3. Implement and manage the onboarding process for new community members and contributors to the OpenDP project.\\n4. Assist with developing and communicating the processes for contribution and vetting.\\n5. Organize and manage OpenDP GitHub repos and issues; review and update existing GitHub issues for clarity and contributor-friendliness.\\n6. Review, prioritize, and track user requests and feedback via a variety of channels as mentioned above; assist with outreach to potential new users of the OpenDP software.\\n7. Organize and manage community working groups addressing specific goals and tasks\\n8. Organize virtual and in-person events for the community, such as community meetings, workshops and webinars.\\n9. Assist with roadmap planning by advocating for community needs.\\n10. Guide OpenDP developers, stakeholders, and community members in documenting user stories, technical specifications, and contributor and user guides.\\n11. Curate resources for community learning and training, in both differential privacy and the specifics of OpenDP.\\n\\n### Basic Qualifications\\n\\n* Minimum of two years' post-secondary education or relevant work experience\\n\\n### Additional Qualifications and Skills\\n\\n* Exposure to and interest in learning more about differential privacy.\\n* Experience and interest in working with open-source projects and communities.\\n* Excellent written and verbal communication skills.\\n* Excellent interpersonal skills and empathy, valuing diversity and working with communities. \\n\\n### Additional Information\\n\\nSEAS is not able to provide visa sponsorship for this position.\\n\\nThis is a one year term appointment, with the possibility of renewal.\\n\\n* The University requires all Harvard community members to be fully vaccinated against COVID-19 and remain up to date with COVID-19 vaccine boosters, as detailed in Harvard's Vaccine & Booster Requirements. Individuals may claim exemption from the vaccine requirement for medical or religious reasons. More information regarding the University's COVID vaccination requirement, exemptions, and verification of vaccination status may be found at the University's \\\"COVID-19 Vaccine Information\\\" webpage: http://www.harvard.edu/coronavirus/covid-19-vaccine-information/. \\n* This is an in-person position based on our campus in Allston, MA.  Due to the COVID-19 pandemic, it is possible that the work may begin with a hybrid model.  All remote work must be performed in a state in which Harvard is registered to do business (CA, CT, MA, MD, ME, NH, NY, RI, and VT). The remote nature of this job is only temporary.  In-person on-campus work will be required as a condition of continued employment once the University and your supervisor determine that it is appropriate. Individual flexible and remote work options for this role can be discussed during the interview process. \\n\\n\\n### About SEAS\\nThe Harvard John A. Paulson School of Engineering and Applied Sciences serves as the connector and integrator of Harvard's teaching and research efforts in engineering, applied sciences, and technology. Our core tenets are educating broad-minded students; interdisciplinary research; integration across disciplines; and balancing theory, experimentation and practice to create an unmatched environment for learning and exploration. Through collaboration with researchers from all parts of Harvard, other universities, and industry, we bring discovery and innovation directly to bear on improving human life and society. For more information about us, please visit www.seas.harvard.edu.\\n\\n### Commitment to Equity, Diversity, Inclusion, and Belonging\\nHarvard University views equity, diversity, inclusion, and belonging as the pathway to achieving inclusive excellence and fostering a campus culture where everyone can thrive. We strive to create a community that draws upon the widest possible pool of talent to unify excellence and diversity while fully embracing individuals from varied backgrounds, cultures, races, identities, life experiences, perspectives, beliefs, and values.\\n\\n### EEO Statement\\n\\nWe are an equal opportunity employer and all qualified applicants will receive consideration for employment without regard to race, color, religion, sex, national origin, disability status, protected veteran status, gender identity, sexual orientation, pregnancy and pregnancy-related conditions, or any other characteristic protected by law.\\n\", \"date\": \"2022-09-02\", \"id\": \"2022-09-02_opendp\"}, {\"entity\": \"Unitary Fund\", \"title\": \"Chief of Staff\", \"url\": \"https://unitary.fund/jobs/chief_of_staff.html\", \"percentTime\": 100, \"percentOSS\": 80, \"deadline\": \"2022-07-26\", \"expires\": \"2022-09-26\", \"location\": \"Remote\", \"description\": \"This opening is a rare opportunity to help run a new type of research\\nnon-profit and contribute to the developing quantum technology ecosystem.\\n\\nUnitary Fund is a 501(c)(3) non-profit working to create a quantum\\ntechnology ecosystem that benefits the most people.\\nWe run a grant program to support new open source quantum tech,\\nand we fund our own research on key projects for the ecosystem.\\n\\n\\nWe\\u2019re looking for a proactive generalist who can contribute and learn\\nacross the organization. They will work directly with the President and\\nthe CTO to manage and scale processes and projects.\\n\\nExamples can include scaling our microgrant process, raising funds from\\nnew supporters, managing our bounty programs and hackathons,\\nbringing on new partner organizations and new geographies,\\ncontracting a new website build, and other special projects.\\n\\nThis role encompasses work across multiple aspects of the organization\\n(microgrants and Unitary Labs) and will require a strongly organized\\nindividual to surface priorities, triage needs, communicate continuously,\\nnd know when to ask for help. This position will work closely with\\nUnitary Fund leadership and have opportunities to develop their own\\nleadership as well. We are looking for someone excited to take ownership\\nof the projects that they work on.\\n\", \"date\": \"2022-07-26\", \"id\": \"2022-07-26_unitaryfund\"}, {\"entity\": \"Spyder\", \"title\": \"Spyder Junior Developer\", \"url\": \"https://tinyurl.com/spyder-grant-job\", \"percentTime\": 100, \"percentOSS\": 100, \"deadline\": \"2022-05-22\", \"expires\": \"2022-05-23\", \"location\": \"Remote\", \"description\": \"[Spyder](https://www.spyder-ide.org/) is a free and open source scientific \\nenvironment written in Python, for Python, and designed by and for \\nscientists, engineers and data analysts. It features a unique combination \\nof the advanced editing, analysis, debugging, and profiling functionality \\nof a comprehensive development tool with the data exploration, interactive \\nexecution, deep inspection, and beautiful visualization capabilities of a \\nscientific package.\\n\\nWe are looking for someone to help us improve the installation experience \\nfor the Spyder IDE Windows users, by enabling the current standalone \\ninstallers available to be auto-updatable and providing a way to install \\ncustom packages that are not bundled with the installers in a simpler way.\\n\\nThe full job/project description and application process is available on \\n[this document](https://docs.google.com/document/d/e/2PACX-1vTUQDK4zrmwJ0E_KQehqmAjWWBFM8aJSlxCOY4m8k64pYnhYn81OMg6VaCPKXdx3DHjbSbxWjOlUMEs/pub)\\n\", \"date\": \"2022-04-29\", \"id\": \"2022-04-29_spyder\"}, {\"entity\": \"ArviZ\", \"title\": \"Dataviz External Consultant\", \"url\": \"https://github.com/arviz-devs/GSoD/blob/main/2021/viz_evaluation.md\", \"percentTime\": \"NA\", \"percentOSS\": 100, \"deadline\": \"2022-07-31\", \"expires\": \"2022-07-31\", \"location\": \"Remote\", \"description\": \"Dataviz is a key part of any statistical or data science job, and Bayesian\\nmodels are not an exception. ArviZ provides tools for Exploratory Analysis\\nof Bayesian Models, from diagnostics and summary statistics to bespoke\\nvisualizations.\\n\\nWe are searching for someone to analyze the current state of available\\nplots to identify missing visualizations, defaults not following bad\\npractices and missing references in the documentation and write a\\nreport with the findings and recommendations. The report will be published\\nin hopes it also helps other dataviz libraries.\\n\\nThe full job description and application process is available on\\n[our GitHub](https://github.com/arviz-devs/GSoD/blob/main/2021/viz_evaluation.md)\\n\", \"date\": \"2022-03-12\", \"id\": \"2022-03-12_arviz\"}, {\"entity\": \"NVIDIA\", \"title\": \"PyData Open Source Developer\", \"url\": \"https://tinyurl.com/nvidia-pydata-job\", \"percentTime\": 100, \"percentOSS\": 80, \"deadline\": \"2022-09-30\", \"expires\": \"2022-09-30\", \"location\": \"Remote\", \"description\": \"Hundreds of thousands of AI engineers, data scientists, and data engineers rely \\non both NVIDIA technologies and related PyData open source projects to do their \\nlife's work. We are continuing to expand our support of the PyData ecosystem and \\nlooking to hire strong engineers who are or can become contributors to libraries \\nlike Pandas, Scikit-learn, NumPy, and more! This is an excellent opportunity for \\nyou to balance between contributing to and helping users of these \\nopen source projects.\\n\\nA full job description and application form can be found on the \\n[NVIDIA career site job posting](https://nvidia.wd5.myworkdayjobs.com/NVIDIAExternalCareerSite/job/US-CA-Remote/Senior-Software-Engineer--PyData-Open-Source-Developer---RAPIDS_JR1954810).\", \"date\": \"2022-03-01\", \"id\": \"2022-03-01_nvidia\"}, {\"entity\": \"TU Delft & SymPy\", \"title\": \"Postdoctoral Researcher Opening: Advancing Biomechanical Modeling By Improving SymPy Code Generation (x/f/m)\", \"url\": \"https://tinyurl.com/sympy-job-2022\", \"percentTime\": 100, \"percentOSS\": 100, \"deadline\": \"2022-02-28\", \"expires\": \"2022-03-01\", \"location\": \"Delft, Netherlands with possibility of remote\", \"description\": \"The TU Delft Bicycle Lab is seeking a postdoctoral researcher for a 1\\nyear equivalent contract (full or part time). You will work on a\\nsub-project of [SymPy\\\\'s \\\\\\\"Improving Foundational Open Source Symbolic\\nMathematics for Science\\\\\\\"\\ngrant](https://chanzuckerberg.com/eoss/proposals/sympy-improving-foundational-open-source-symbolic-mathematics-for-science/)\\nfunded by the [Chan-Zuckerberg Foundation's \\\"Essential Open Source\\nSoftware for Science\\\\\\\"\\nprogram](https://chanzuckerberg.com/newsroom/czi-awards-16-million-for-foundational-open-source-software-tools-essential-to-biomedicine/).\\nThe purpose of the overall grant is to improve the SymPy Python symbolic\\nmathematics library in the key areas of performance, code generation,\\nand documentation. The [full grant\\nproposal](https://doi.org/10.6084/m9.figshare.16590053.v1) is available\\npublicly on Figshare.\\n\\n**Applications Due February 28, 2022**\\n\\nMore information about the job can be found at\\nhttps://mechmotum.github.io/blog/sympy-czi-postdoc.html\\n\", \"date\": \"2022-02-04\", \"id\": \"2022-02-04_sympy\"}, {\"entity\": \"rOpenSci\", \"title\": \"Community Manager\", \"url\": \"https://ropensci.org/careers/community-manager-2022\", \"percentTime\": 100, \"percentOSS\": 100, \"deadline\": \"2022-03-01\", \"expires\": \"2022-03-02\", \"location\": \"Remote\", \"description\": \"rOpenSci seeks a _Community Manager_ to support and build our vibrant and inclusive community\\nof researchers and software engineers and help expand the scope and impact of our work in\\nopen science.\\n\\nrOpenSci is a not-for-profit organization with the mission to expand access to scientific data\\nand promote a culture of reproducible research and sustainable research software.\\nrOpenSci staff and community are fully remote, with core team members in North America and\\nEurope and a global community of contributors.  We're looking for a new community manager\\nto help us to consolidate our existing efforts and ensure that we're supporting an increasingly\\ndiverse membership.\\n\\nThis is a long-term, full-time contract position with a salary range of $70,000-$85,000,\\ncommensurate with experience, skills, and local benefits requirements.  The position is 100%\\nremote. Costs related to a home office or co-working space will be supported,\\nas well as professional development opportunities,\\n\\nA full job description and application form can be found at <https://ropensci.org/careers/community-manager-2022/>.\", \"date\": \"2022-02-03\", \"id\": \"2022-02-03_ropensci\"}, {\"entity\": \"Unitary Fund\", \"title\": \"Member of the Technical Staff (part-time)\", \"url\": \"https://unitary.fund/jobs/mts.html\", \"percentTime\": 40, \"percentOSS\": 100, \"deadline\": \"2022-02-13\", \"expires\": \"2022-02-13\", \"location\": \"Remote\", \"description\": \"We\\u2019re hiring Members of Technical Staff with a focus on Mitiq.\\nYou'll be part of the core development team of [Mitiq](https://github.com/unitaryfund/mitiq), the open-source quantum\\nerror mitigation toolkit, in collaboration with key players from the industry and research sector.\\n\\nUnitary Fund is a 501(c)(3) non-profit working to create a quantum technology ecosystem that benefits the most people.\\nWe run a grant program to support new open source quantum tech, and we fund our own research on key projects for the ecosystem.\\nWe\\u2019re hiring for a part-time marketing and communications role on our team.\\nThis opening is a rare opportunity to contribute to the developing quantum technology ecosystem.\\nThe full job description can be found [here](https://unitary.fund/jobs/mts.html)\", \"date\": \"2022-01-13\", \"id\": \"2022-01-13_unitaryfund\"}, {\"entity\": \"GNU Radio\", \"title\": \"Technical writer\", \"url\": \"https://www.gnuradio.org/news/2021-11-30-numfocus-jobs/\", \"percentOSS\": 100, \"deadline\": \"2022-04-03\", \"expires\": \"2022-04-03\", \"location\": \"Remote\", \"description\": \"GNU Radio has recently won a small grant from NumFOCUS to help improve GNU Radio\\u2019s tutorials, as they play a major role in helping new users get through the steep learning curve. We are looking to hire a part-time contractor to perform the work of one GNU Radio expert. It is anticipated that this work will be performed during Q1 of 2022.\\n\\n### Rate\\n\\n$800 total, $40 per hour, 20 hours total\\n\\n### Task\\n\\n* Starting at the top of the tutorial list and working your way down (or using an order of your choosing), go through as many tutorials as the funding/time allows, and do a single editing pass through each one, to improve clarity and writing quality. Readability is more important than using \\u201cproper technical style\\u201d; many readers aren\\u2019t going to have English as their first language. Any improvements to visual presentation, such as wiki formatting to make the content look better (e.g., shrink an image that is clearly way too large compared to the surrounding content), is also desired.\\n\\nEmail jobs@gnuradio.org if you are interested in either of these positions. Thanks!\\n\", \"date\": \"2021-12-03\", \"id\": \"2021-12-03_gnuradio\"}, {\"entity\": \"GNU Radio\", \"title\": \"GNU Radio Expert\", \"url\": \"https://www.gnuradio.org/news/2021-11-30-numfocus-jobs/\", \"percentOSS\": 100, \"deadline\": \"2022-04-01\", \"expires\": \"2022-04-01\", \"location\": \"Remote\", \"description\": \"GNU Radio has recently won a small grant from NumFOCUS to help improve GNU Radio\\u2019s tutorials, as they play a major role in helping new users get through the steep learning curve. We are looking to hire a part-time contractor to perform the work of one GNU Radio expert. It is anticipated that this work will be performed during Q1 of 2022.\\n\\n### Rate\\n\\n$3600 total, $60 per hour, 60 hours total spread across at least 1 month (max 3 months)\\n\\n### Tasks (tackle one or more of the following tasks)\\n\\n* Complete overhaul of the QPSK and BPSK tutorials reflecting the change from \\u2018Polyphase Clock Sync\\u2019 to \\u2018Symbol Sync\\u2019, and from \\u2018CMA Equalizer\\u2019 to \\u2018Linear Equalizer\\u2019 and \\u2018Adaptive Algorithm\\u2019.\\n* The Embedded Python Block tutorial should be the first tutorial that dives into how to write a block (in Python) but it\\u2019s currently performing double duty as the Embedded Python Block \\u201cblock docs\\u201d page, so the task is to separate them into two pages and improve the tutorial itself.\\n* Pick one or more of our existing tutorials and propose what you will do to improve it, then get approval from the GNU Radio leadership, and then execute on the proposed improvements. The step prior to approval cannot involve billing more than 4 hours.\\n* If the contractor has any specific expertise, e.g. in an application of GNU Radio we don\\u2019t currently have a tutorial about, the contractor can create a new tutorial after getting GNU Radio leadership approval.\\n\\nEffort should be spread relatively evenly across at least 1 month (with a max of 3 months), so that the GNU Radio Expert has time to share midterm progress with the GNU Radio leadership and obtain feedback. To enforce this, we will limit the amount billed each week to no more than 16 hours. The effort must be completed within 3 months after the start of work.\\n\\nEmail jobs@gnuradio.org if you are interested in either of these positions. Thanks!\\n\", \"date\": \"2021-11-30\", \"id\": \"2021-11-30_gnuradio\"}, {\"entity\": \"Zarr\", \"title\": \"Community Manager\", \"percentTime\": 100, \"percentOSS\": 100, \"deadline\": \"2021-12-15\", \"expires\": \"2021-12-21\", \"location\": \"Remote\", \"description\": \"Zarr is a format for the storage of chunked, compressed, N-dimensional arrays.\\nBuilt originally in Python for working with NumPy arrays, Zarr is now supported\\nin more than half a dozen languages. With funding from the Chan Zuckerberg\\nInitiative, we are looking to hire a full-time, open-source enthusiast for two\\nyears to work as our community manager.\\n\\nAbout the Role:\\n\\nAs the first full-time position dedicated to Zarr, you will have the\\nopportunity to shape the role to meet the needs of the community. You will be\\nan advocate for our strong, inclusive community, as well as define ways to\\nencourage new contributions while balancing the needs of a maturing data\\nformat.\\n\\nWe are looking for someone who can:\\n\\n* Foster and build relationships online\\n* Communicate clearly and technically with open-source developers\\n* Be a conduit to the research user communities\\n* Structure the project for growth and resiliency\\n\\nThis is a fully remote position. Responsibilities:\\n\\n* Work with open source contributors to review, refine, and merge contributions\\n* Identify and mentor potential new core-developers\\n* Design a specification process that fosters quick decisions on emerging user cases\\n* Report developments via social media, the Zarr website and scientific publications\\n* Plan, organize, and run regular community calls\\n* Attend online and in-person events to speak about the project\\n* Help to build a welcoming, inclusive, and supportive community environment!\\n\\n## Experience:\\n\\nCandidates should have experience in one or more programming languages with a\\nstrong tendency towards Python and be comfortable working with Git and GitHub.\\n\\n## Compensation:\\n\\nThis role can be either a contract position or an employed position with fringe\\nbenefits. $60,000 \\u2013 $80,000 per year dependent on position type and experience.\\nIf you are looking for a flexible, open-source position that can make a world\\nof difference in bioimaging, climate science, or more. Please get in touch via\\nhiring@numfocus.org.\\n\", \"date\": \"2021-11-18\", \"id\": \"2021-11-18_zarr\"}, {\"entity\": \"Quansight\", \"title\": \"Sr. Frontend Engineer\", \"url\": \"https://quansight.breezy.hr/p/47a9c3e35069-senior-frontend-software-engineer\", \"percentTime\": 100, \"percentOSS\": 60, \"badges\": [\"Sponsor\"], \"deadline\": \"2021-10-13\", \"expires\": \"2021-10-13\", \"location\": \"Remote\", \"description\": \"We are looking for a Senior Frontend Engineer to join Quansight Labs and our \\nmission of supporting the PyData open-source ecosystem. \\nAs a Senior Frontend Engineer, you will lead our internal web-related projects \\nand contribute to the community-driven open-source projects supported by \\nQuansight Labs. We are seeking great engineers who are passionate about web \\ndevelopment, open source, accessibility and who possess a collaborative and \\ncommunity-first mindset.\\n\", \"date\": \"2021-10-13\", \"id\": \"2021-10-13_quansight\"}, {\"entity\": \"Unitary Fund\", \"title\": \"Communications and Marketing (part-time)\", \"url\": \"https://unitary.fund/jobs/marketing_comm.html\", \"percentTime\": 25, \"percentOSS\": 100, \"deadline\": \"2021-11-19\", \"expires\": \"2021-11-19\", \"location\": \"Remote\", \"description\": \"Unitary Fund is a 501(c)(3) non-profit working to create a quantum technology ecosystem that benefits the most people. \\nWe run a grant program to support new open source quantum tech, and we fund our own research on key projects for the ecosystem. \\nWe\\u2019re hiring for a part-time marketing and communications role on our team. \\nThis opening is a rare opportunity to contribute to the developing quantum technology ecosystem.\\nThe full job description can be found [here](https://unitary.fund/jobs/marketing_comm.html)\\n\", \"date\": \"2021-10-12\", \"id\": \"2021-10-12_unitaryfund\"}, {\"entity\": \"Quansight\", \"title\": \"Contributor Experience Lead\", \"url\": \"https://quansight.breezy.hr/p/361a2e7da19b-contributor-experience-lead\", \"percentTime\": 100, \"percentOSS\": 100, \"badges\": [\"Sponsor\"], \"deadline\": \"2021-10-31\", \"expires\": \"2021-10-31\", \"location\": \"Remote\", \"description\": \"We are looking for a Contributor Experience Lead, who will work across\\nprojects to identify, document, and implement practices to foster inclusive\\nopen-source communities for NumPy, SciPy, Matplotlib, and Pandas.\\n\", \"date\": \"2021-09-09\", \"id\": \"2021-09-09_quansight\"}, {\"entity\": \"Aperio Software\", \"title\": \"Software Developer\", \"url\": \"https://aperiosoftware.com\", \"percentTime\": 100, \"percentOSS\": 80, \"deadline\": \"2021-05-14\", \"expires\": \"2021-05-30\", \"location\": \"Remote\", \"description\": \"Aperio Software is a company that specialises in developing software and providing software training in scientific domains for a variety of organisations and open source projects.\\nPast and current projects include the development of user tools and calibration software for the Daniel K. Inouye Solar Telescope (DKIST), work on the AAS WorldWide Telescope project, contributions to the Astropy and SunPy projects, and development of the glue visualisation tool.\\n\\nAperio is seeking a software developer and experienced open-source contributor to work with us on our growing number of projects in solar physics and astronomy, primarily in established open-source projects.\\nThis will include working on the development, testing, documentation and maintenance of several different software packages.\\nYou will be required to liaise with clients, other staff and the open-source community. \\nIn addition, there will be the opportunity to get involved in designing and delivering programming workshops.\\nFor more details see the full job description at [aperiosoftware.com/jobs](https://aperiosoftware.com/jobs).\\n\", \"date\": \"2021-04-30\", \"id\": \"2021-04-30_aperio\"}, {\"entity\": \"Kitware\", \"title\": \"Medical Image Analysis Researcher\", \"url\": \"https://www.kitware.com/careers\", \"percentTime\": 100, \"percentOSS\": 75, \"deadline\": \"2021-10-30\", \"expires\": \"2021-10-30\", \"location\": \"Carrboro, NC\", \"description\": \"Team Description: \\nKitware's Medical Computing team solves complex healthcare challenges through customized software solutions. The team provides research, development, and technology integration services to research centers, universities and companies in the medical and biomedical sectors. By joining our team you will participate in a dynamic multidisciplinary work environment with exceptionally talented computer scientists, software engineers, mechanical engineers and biomedical engineers.| \\n\\nAbout the projects: \\nWe build powerful software solutions using our well-established open source platforms including VTK, ITK, 3D Slicer, Pulse, iMSTK, CMake and ParaView. These platforms are mature, supported, documented, and thoroughly tested software systems that are in use by tens of thousands of developers and end-users worldwide. Our commercial projects involve generating solutions for medical device companies from ultrasound and preclinical imaging companies, to surgery device companies. Our research projects involve collaborations with top research institutions, including Harvard Medical School, MIT, Cleveland Clinic, Duke University, and others and build on our open source platforms.\\n\", \"date\": \"2021-04-30\", \"id\": \"2021-04-30_kitware\"}, {\"entity\": \"The Julia Language\", \"title\": \"Technical Writer\", \"url\": \"https://discourse.julialang.org/t/the-julia-language-is-hiring-a-technical-writer-as-part-of-google-season-of-docs-2021/59806\", \"percentTime\": 25, \"percentOSS\": 100, \"deadline\": \"2021-05-10\", \"expires\": \"2021-05-10\", \"location\": \"Remote\", \"description\": \"The Julia Language is excited to share that we will be hiring a technical writer as part of Google Season of Docs 2021. For more details, check out the [full job post](https://discourse.julialang.org/t/the-julia-language-is-hiring-a-technical-writer-as-part-of-google-season-of-docs-2021/59806).\\n\", \"date\": \"2021-04-22\", \"id\": \"2021-04-22_julia\"}, {\"entity\": \"Coiled\", \"title\": \"OSS Engineer\", \"url\": \"https://coiled.io/careers/\", \"percentTime\": 100, \"percentOSS\": 80, \"badges\": [\"Sponsor\"], \"deadline\": \"2021-10-14\", \"expires\": \"2021-10-14\", \"location\": \"Remote\", \"description\": \"This role is for a software engineer to work on the open source Dask project.\\nYou will be able to build and maintain Dask and its connections with surrounding\\nprojects.\\n\\nThis role will also ensure that Coiled customers are effective in their use of\\nDask to scale Python. You will interact with users (both community and clients),\\nengage in team prioritization, and work to implement fixes and features to improve\\nthe experience and capabilities of the Python ecosystem, verifying that those fixes\\nresolve user needs.\\n\", \"date\": \"2021-04-14\", \"id\": \"2021-04-14_coiled\"}, {\"entity\": \"Quansight\", \"title\": \"PyData maintainer\", \"url\": \"https://www.quansight.com/careers\", \"percentTime\": 100, \"percentOSS\": 60, \"badges\": [\"Sponsor\"], \"deadline\": \"2021-10-13\", \"expires\": \"2021-10-13\", \"location\": \"Remote\", \"description\": \"This is an open hiring call for candidates who are already heavily invested\\nin contributing to the PyData open source ecosystem and are looking for a\\ncompany that can support their passion. The specifics of your role will be\\ndetermined during the interview process.\\n\", \"date\": \"2021-04-13\", \"id\": \"2021-04-13_quansight\"}]\nexport default jobs;\n","const filterJobs = (jobs, filter) => {\n  // Filter out expired jobs.  Use Howland Island timezone to ensure\n  // that everyone sees the job on its last day.\n  const today = new Date();\n  if (!filter.showExpired) {\n    jobs = jobs.filter((job) => new Date(`${job.expires}T23:59:59.999-12:00`) > today)\n  }\n\n  if (filter.fullTime) {\n    jobs = jobs.filter((job) => job.percentTime === 100)\n  }\n\n  if (filter.ossTimeGt) {\n    jobs = jobs.filter((job) => job.percentOSS >= parseInt(filter.ossTimeGt))\n  }\n\n  if (filter.remote) {\n    jobs = jobs.filter((job) => (job.location || 'remote').toLowerCase() === 'remote' );\n  }\n\n  return jobs;\n}\n\nexport default filterJobs;\n","import React from \"react\";\n\nimport { useForm } from \"react-hook-form\";\n\nimport Jobs from \"./Jobs\";\nimport HowToPost from \"./HowToPost\";\n\nimport jobData from '../jobs.js';\nimport filterJobs from '../filter-jobs.js';\n\n\nconst defaultFormValues = {\n  fullTime: false,\n  ossTimeGt: 0,\n  showExpired: false\n};\n\nconst JobsFilter = () => {\n  const { register, watch, reset } = useForm();\n  const formData = watch();\n\n  const jobs = filterJobs(jobData, formData);\n\n  return (\n    <div className=\"jobsLayout\">\n      <div className=\"leftColumn\">\n        <div className=\"filter\">\n          <form>\n            <div className=\"section\">\n              Type\n            </div>\n\n            <label>\n              <input type=\"checkbox\" {...register('fullTime')} />\n              Full-time\n            </label>\n            <label>\n              <input type=\"checkbox\" {...register('showExpired')} />\n              Expired\n            </label>\n\n\n            <div className=\"section\">\n              Open Source\n            </div>\n\n            <label>\n              <select {...register('ossTimeGt')}>\n                <option value=\"0\">Any</option>\n                <option value=\"25\">&gt; 25%</option>\n                <option value=\"50\">&gt; 50%</option>\n                <option value=\"75\">&gt; 75%</option>\n                <option value=\"100\">100%</option>\n              </select>\n              &nbsp;OSS time\n            </label>\n\n            <div className=\"section\">\n              Location\n            </div>\n            <label>\n              <input type=\"checkbox\" {...register('remote')} />\n              Remote\n            </label>\n\n            <button\n              type=\"button\"\n              className=\"reset\"\n              onClick={() => reset(defaultFormValues)}\n            >\n              Reset\n            </button>\n          </form>\n        </div>\n        <HowToPost/>\n      </div>\n      <Jobs jobs={jobs}/>\n    </div>\n  )\n};\n\n\nexport default JobsFilter;\n","import React from \"react\";\n\nimport Page from \"../components/Page\";\nimport JobsFilter from \"../components/JobsFilter\";\n\nexport default function Home() {\n  return (\n    <Page>\n      <JobsFilter/>\n    </Page>\n  )\n}\n"],"names":["isCheckBoxInput","element","type","isDateObject","value","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","event","target","checked","isNameInFieldArray","names","name","has","substring","search","getNodeParentName","compact","filter","Boolean","isUndefined","val","undefined","get","obj","path","defaultValue","result","split","reduce","key","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","getProxyFormState","formState","_proxyFormState","localProxyFormState","isRoot","Object","defineProperty","_key","isEmptyObject","keys","length","shouldRenderFormState","formStateData","find","convertToArrayPayload","useSubscribe","props","_props","current","subscription","disabled","subject","subscribe","next","callback","unsubscribe","tearDown","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","isFunction","objectHasFunction","data","appendErrors","validateAllFieldCriteria","errors","message","types","isKey","test","stringToPath","input","replace","set","object","index","tempPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","field","_f","currentField","ref","focus","refs","isWatched","isBlurEvent","some","watchName","startsWith","slice","updateFieldArrayRootError","error","fieldArrayErrors","isBoolean","isFileInput","isMessage","isRadioInput","isRegex","RegExp","defaultResult","isValid","validResult","getCheckboxValue","options","values","option","attributes","defaultReturn","getRadioValue","previous","getValidateError","every","getValueAndMessage","validationData","validateField","async","inputValue","shouldUseNativeValidation","isFieldArray","required","maxLength","minLength","min","max","pattern","validate","valueAsNumber","mount","inputRef","setCustomValidity","reportValidity","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","valueAsDate","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","isWeb","window","HTMLElement","document","cloneObject","copy","Set","Blob","FileList","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isEmptyArray","unset","updatePath","childObject","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","createSubject","_observers","observers","observer","push","o","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","isHTMLElement","owner","ownerDocument","defaultView","isMultipleSelect","live","isConnected","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","defaultValues","getFieldValueAs","setValueAs","NaN","getFieldValue","files","selectedOptions","getRuleValue","rule","source","schemaErrorLookup","_fields","join","foundError","pop","defaultOptions","reValidateMode","shouldFocusError","createFormControl","delayErrorCallback","_options","_formState","isDirty","isValidating","dirtyFields","isSubmitted","submitCount","touchedFields","isSubmitting","isSubmitSuccessful","_defaultValues","_formValues","shouldUnregister","_stateFlags","action","unMount","array","timer","validateFields","_subjects","state","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","criteriaMode","_updateValid","shouldSkipRender","resolver","_executeSchema","executeBuiltInValidation","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","_getDirty","isPreviousFieldDirty","shouldRenderByError","fieldState","previousFieldError","shouldUpdateValid","delayError","updateErrors","wait","clearTimeout","setTimeout","updatedFormState","v","context","getResolverOptions","shouldOnlyCheckValid","valid","isFieldArrayRoot","fieldError","getValues","_getWatch","fieldValues","fieldReference","forEach","selectRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","onChange","shouldSkipValidation","deps","isTouched","skipValidation","watched","onBlur","previousErrorLookupResult","errorLookupResult","fieldNames","executeSchemaAndUpdateState","Promise","all","shouldFocus","getFieldState","invalid","unregister","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","register","disabledIsDefined","fieldRef","querySelectorAll","radioOrCheckbox","control","_removeUnmounted","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","argA","argB","unsetEmptyArray","_getFieldArray","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","info","reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","keepDirtyValues","closest","_a","keepSubmitCount","keepIsSubmitted","keepErrors","resetField","clearErrors","inputName","setError","setFocus","shouldSelect","select","_ref","jobs","React","className","href","job","Job","id","HowToPost","filterJobs","today","showExpired","expires","fullTime","percentTime","ossTimeGt","percentOSS","parseInt","remote","location","toLowerCase","defaultFormValues","JobsFilter","_formControl","updateFormState","useForm","formData","jobData","assign","onClick","Jobs","Home","Page"],"sourceRoot":""}